{"version":3,"sources":["hooks/router-hooks.tsx","view-models/core/image-record.ts","view-models/core/reference-record.ts","view-models/core/user-record.ts","view-models/playlist/playlist-record.ts","view-models/playlist/playlist-paging-record.ts","services/spotify/spotify-service.ts","context/spotify.tsx","hooks/service-hooks.ts","pages/spotify-callback/spotify-callback.tsx","components/track-listing/track-listing.tsx","components/loader/loader.tsx","components/infinite-scroller/infinite-scroller.tsx","components/switch-checkbox/switch-checkbox.tsx","pages/playlist/playlist-page.tsx","components/nav-bar/nav-bar.tsx","layout/default-layout.tsx","components/playlist-card/playlist-card.tsx","components/playlist-list/playlist-list.tsx","pages/playlists/playlists-page.tsx","pages/playlists/playlists-following-page.tsx","pages/playlists/playlists-all-page.tsx","pages/not-found/not-found-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useRouter","params","useParams","location","useLocation","history","useHistory","match","useRouteMatch","useMemo","push","replace","pathname","query","queryString","parse","search","ImageRecord","value","this","merge","Record","height","url","width","ReferenceRecord","href","total","defaultValues","display_name","external_urls","Map","followers","id","images","List","product","type","uri","UserRecord","_transform","map","i","recordDefaults","collaborative","description","name","owner","public","snapshot_id","tracks","PlaylistRecord","items","limit","next","offset","previous","PlaylistPagingRecord","baseUrl","SpotifyApiService","_authenticate","origin","window","buildUrl","path","queryParams","response_type","client_id","scope","redirect_uri","state","JSON","stringify","_spotifyFetch","fetchUrl","a","spotify_auth","localStorage","getItem","token_type","access_token","fetch","headers","Authorization","response","status","json","setAccessToken","setItem","getCurrentUserPlaylists","then","playlistJson","getCurrentUserProfile","user","getPlaylist","getTracklist","Spotify","createContext","spotifyApi","useSpotifyApi","useContext","SpotifyCallback","hash","substr","split","v","reduce","pre","key","decodeURIComponent","TrackListing","forwardRef","ref","track","artists","filter","join","trackImageUrl","album","skip","first","className","src","alt","Loader","message","xmlns","viewBox","transform","rx","attributeName","begin","dur","values","calcMode","repeatCount","x","SwitchCheckboxAlignment","InfiniteScroller","hasMore","itemRowTemplate","onLoadMoreItems","triggerOffsetCount","useState","innerHeight","document","documentElement","clientHeight","pageHeight","setPageHeight","loadMoreTriggerTrackRef","useRef","onScroll","useCallback","current","rect","getBoundingClientRect","top","bottom","useEffect","onResize","ev","calculatedPageHeight","target","addEventListener","removeEventListener","listLength","count","triggerElementIndex","t","itemProps","ItemTemplate","Playlist","playlist","setPlaylist","tracklist","setTracklist","setHasMore","loadNext","setLoadNext","nextTracksUri","setNextTracksUri","useAsyncEffect","isMounted","nextTracklistPage","prevTracklist","SvgMenuIcon","isOpen","fillRule","d","NavBar","onOpen","setIsOpen","menuClass","onClick","prevState","to","DefaultLayout","children","SwitchCheckbox","alignment","Left","isChecked","showDisplayValue","checkedDisplayValue","unCheckedDisplayValue","onChange","checked","setChecked","switchText","placement","paddingClassName","switchClassNames","prevCheckedValue","nextCheckedValue","Right","PlaylistCard","image","router","PlaylistList","playlistFilter","_","playlists","setPlaylists","nextPlaylistPageUri","setNextPlaylistPageUri","playlistPage","playlistRecords","nextPlaylistPage","prevPlaylist","Fragment","MyPlaylists","setUser","filterByOwner","FollowingPlaylists","filterNotByOwner","AllMyPlaylists","NotFound","App","body","classList","add","remove","exact","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a41b0bc.chunk.js","sourcesContent":["import {\r\n    useParams,\r\n    useLocation,\r\n    useHistory,\r\n    useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport { useMemo } from \"react\";\r\nimport queryString from \"query-string\";\r\n\r\n// Hook\r\nexport function useRouter() {\r\n    const params = useParams();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const match = useRouteMatch();\r\n\r\n    // Return our custom router object\r\n    // Memoize so that a new object is only returned if something changes\r\n    return useMemo(() => {\r\n        return {\r\n            // For convenience add push(), replace(), pathname at top level\r\n            push: history.push,\r\n            replace: history.replace,\r\n            pathname: location.pathname,\r\n            // Merge params and parsed query string into single \"query\" object\r\n            // so that they can be used interchangeably.\r\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\r\n            query: {\r\n                ...queryString.parse(location.search), // Convert string to object\r\n                ...params,\r\n            },\r\n            // Include match, location, history objects so we have\r\n            // access to extra React Router functionality if needed.\r\n            match,\r\n            location,\r\n            history,\r\n        };\r\n    }, [params, match, location, history]);\r\n}\r\n","import { Record } from \"immutable\";\r\nimport { SpotifyImage } from \"../../dtos/Spotify/core\";\r\n\r\nconst recordDefaults = {\r\n    height: 128,\r\n    url: \"https://via.placeholder.com/128\",\r\n    width: 128,\r\n};\r\n\r\nexport class ImageRecord extends Record(recordDefaults, \"Image\") {\r\n    constructor(params?: Partial<SpotifyImage>) {\r\n        params ? super(params) : super();\r\n    }\r\n\r\n    with(value: Partial<SpotifyImage>): ImageRecord {\r\n        return this.merge(value);\r\n    }\r\n}\r\n","import { Record } from \"immutable\";\r\nimport { SpotifyReference } from \"../../dtos/Spotify/core\";\r\n\r\nexport class ReferenceRecord extends Record(\r\n    {\r\n        href: \"\",\r\n        total: 0,\r\n    },\r\n    \"Reference\"\r\n) {\r\n    constructor(params?: Partial<SpotifyReference | ReferenceRecord>) {\r\n        params ? super(params) : super();\r\n    }\r\n\r\n    with(\r\n        params?: Partial<SpotifyReference | ReferenceRecord>\r\n    ): ReferenceRecord {\r\n        return params ? this.merge(params) : this;\r\n    }\r\n}\r\n","import { Map, Record, List } from \"immutable\";\r\nimport { SpotifyUser } from \"../../dtos/Spotify/core\";\r\nimport { ImageRecord } from \"./image-record\";\r\nimport { ReferenceRecord } from \"./reference-record\";\r\n\r\nconst defaultValues = {\r\n    display_name: \"\",\r\n    external_urls: Map<string>({}),\r\n    followers: new ReferenceRecord(),\r\n    href: \"\",\r\n    id: \"\",\r\n    images: List<ImageRecord>([]),\r\n    product: \"free\",\r\n    type: \"\",\r\n    uri: \"\",\r\n};\r\n\r\nexport class UserRecord extends Record(defaultValues, \"User\") {\r\n    private static _transform(params: Partial<SpotifyUser | UserRecord>) {\r\n        return {\r\n            ...params,\r\n            external_urls: Map<string>(\r\n                !params.external_urls ? ({} as any) : params.external_urls\r\n            ),\r\n            followers:\r\n                params.followers instanceof ReferenceRecord\r\n                    ? params.followers\r\n                    : new ReferenceRecord(params.followers),\r\n            images: List(!params.images ? [] : params.images).map((i) =>\r\n                i instanceof ImageRecord ? i : new ImageRecord(i)\r\n            ),\r\n        };\r\n    }\r\n\r\n    constructor(params?: Partial<SpotifyUser | UserRecord>) {\r\n        if (!params) {\r\n            super();\r\n            return;\r\n        }\r\n\r\n        super({\r\n            ...params,\r\n            ...UserRecord._transform(params),\r\n        });\r\n    }\r\n\r\n    public with(params?: Partial<SpotifyUser | UserRecord>): UserRecord {\r\n        return params\r\n            ? this.merge({\r\n                  ...params,\r\n                  ...UserRecord._transform(params),\r\n              })\r\n            : this;\r\n    }\r\n}\r\n","import { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\r\nimport { List, Record, Map } from \"immutable\";\r\nimport { ImageRecord } from \"../core/image-record\";\r\nimport { UserRecord } from \"../core/user-record\";\r\nimport { SpotifyPaging } from \"../../dtos/Spotify/core\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\n\r\nconst recordDefaults = {\r\n    collaborative: false,\r\n    description: \"\",\r\n    external_urls: Map<string>({}),\r\n    href: (null as unknown) as string,\r\n    id: (null as unknown) as string,\r\n    images: List<ImageRecord>([]),\r\n    name: \"\",\r\n    owner: new UserRecord(),\r\n    public: false,\r\n    snapshot_id: \"\",\r\n    tracks: {} as SpotifyPaging<SpotifyTrackWithMetadata>,\r\n    type: \"playlist\",\r\n    uri: \"\",\r\n};\r\n\r\nexport class PlaylistRecord extends Record(recordDefaults, \"Playlist\") {\r\n    private static _transform(\r\n        params: Partial<SpotifyPlaylist | PlaylistRecord>\r\n    ) {\r\n        return {\r\n            ...params,\r\n            external_urls: Map<string>(\r\n                !params.external_urls ? ({} as any) : params.external_urls\r\n            ),\r\n            owner:\r\n                params.owner instanceof UserRecord\r\n                    ? params.owner\r\n                    : new UserRecord(params.owner),\r\n            images: List(\r\n                !params.images ? [new ImageRecord()] : params.images\r\n            ).map((i) => (i instanceof ImageRecord ? i : new ImageRecord(i))),\r\n        };\r\n    }\r\n\r\n    constructor(params?: Partial<SpotifyPlaylist | PlaylistRecord>) {\r\n        if (!params) {\r\n            super();\r\n            return;\r\n        }\r\n\r\n        super({\r\n            ...params,\r\n            ...PlaylistRecord._transform(params),\r\n        });\r\n    }\r\n\r\n    public with(\r\n        params: Partial<SpotifyPlaylist | PlaylistRecord>\r\n    ): PlaylistRecord {\r\n        return params\r\n            ? this.merge({\r\n                  ...params,\r\n                  ...PlaylistRecord._transform(params),\r\n              })\r\n            : this;\r\n    }\r\n}\r\n","import { List, Record } from \"immutable\";\r\nimport { SpotifyPaging } from \"../../dtos/Spotify/core\";\r\nimport { PlaylistRecord } from \"./playlist-record\";\r\nimport { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\r\n\r\nconst defaultValues = {\r\n    href: \"\",\r\n    items: List<PlaylistRecord>(),\r\n    limit: 0,\r\n    next: \"\",\r\n    offset: 0,\r\n    previous: \"\",\r\n    total: 0,\r\n};\r\n\r\nexport class PlaylistPagingRecord extends Record(defaultValues, \"Paging\") {\r\n    private static _transform(\r\n        params: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\r\n    ) {\r\n        let items: List<PlaylistRecord>;\r\n        if (!!params.items) {\r\n            items = List(\r\n                (params as SpotifyPaging<SpotifyPlaylist>).items\r\n            ).map((i: SpotifyPlaylist | PlaylistRecord) =>\r\n                i instanceof PlaylistRecord ? i : new PlaylistRecord(i)\r\n            );\r\n        } else {\r\n            items = List([]);\r\n        }\r\n\r\n        return {\r\n            ...params,\r\n            items,\r\n        };\r\n    }\r\n\r\n    constructor(\r\n        params?: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\r\n    ) {\r\n        if (!params) {\r\n            super();\r\n            return;\r\n        }\r\n\r\n        super({\r\n            ...params,\r\n            ...PlaylistPagingRecord._transform(params),\r\n        });\r\n    }\r\n\r\n    with(\r\n        params?: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\r\n    ): PlaylistPagingRecord {\r\n        return params\r\n            ? this.merge({\r\n                  ...params,\r\n                  ...PlaylistPagingRecord._transform(params),\r\n              })\r\n            : this;\r\n    }\r\n}\r\n","import { SpotifyPaging, SpotifyUser } from \"../../dtos/Spotify/core\";\r\nimport { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\r\nimport { PlaylistPagingRecord } from \"../../view-models/playlist/playlist-paging-record\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport buildUrl from \"build-url\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\n\r\nexport interface ISpotifyApiService {\r\n    setAccessToken: (token_type: string, access_token: string) => void;\r\n    getCurrentUserPlaylists: (\r\n        fetchUrl?: string\r\n    ) => Promise<PlaylistPagingRecord>;\r\n    getCurrentUserProfile: () => Promise<UserRecord>;\r\n    getPlaylist: (id: string) => Promise<PlaylistRecord>;\r\n    getTracklist: (\r\n        url: string\r\n    ) => Promise<SpotifyPaging<SpotifyTrackWithMetadata>>;\r\n}\r\n\r\nconst baseUrl = \"https://api.spotify.com/v1\";\r\nconst spotifyAccountsUrl = \"https://accounts.spotify.com\";\r\nconst client_id = \"3c5666e14ae14e39a0efc18f540d621e\";\r\nconst response_type = \"token\";\r\nconst scope =\r\n    \"user-read-private user-read-email playlist-read-private playlist-read-collaborative playlist-modify-public playlist-modify-private\";\r\n\r\nexport const SpotifyApiService: ISpotifyApiService = (function() {\r\n    const _authenticate = () => {\r\n        const { origin } = window.location;\r\n\r\n        const href = buildUrl(spotifyAccountsUrl, {\r\n            path: \"authorize\",\r\n            queryParams: {\r\n                response_type,\r\n                client_id,\r\n                scope,\r\n                redirect_uri: `${origin}`,\r\n                state: JSON.stringify({ redirect_uri: window.location.href }),\r\n            },\r\n        });\r\n\r\n        window.location.href = href;\r\n    };\r\n\r\n    const _spotifyFetch = async <T = any>(fetchUrl: string): Promise<T> => {\r\n        const spotify_auth = localStorage.getItem(\"spotify_auth\");\r\n\r\n        if (!spotify_auth) {\r\n            _authenticate();\r\n        }\r\n\r\n        const { token_type, access_token } = JSON.parse(spotify_auth as string);\r\n\r\n        if (!access_token || !token_type) {\r\n            _authenticate();\r\n        }\r\n\r\n        const response = await fetch(fetchUrl, {\r\n            headers: {\r\n                Authorization: `${token_type} ${access_token}`,\r\n            },\r\n        });\r\n\r\n        // Check if unauthenticated user\r\n        if (response.status === 401) {\r\n            _authenticate();\r\n        }\r\n\r\n        const json = await response.json();\r\n\r\n        return json;\r\n    };\r\n\r\n    const _setAccessToken = (token_type: string, access_token: string) => {\r\n        localStorage.setItem(\r\n            \"spotify_auth\",\r\n            JSON.stringify({\r\n                token_type,\r\n                access_token,\r\n            })\r\n        );\r\n    };\r\n\r\n    const _getCurrentUserPlaylists = async (\r\n        fetchUrl?: string\r\n    ): Promise<PlaylistPagingRecord> => {\r\n        return await _spotifyFetch<SpotifyPaging<SpotifyPlaylist>>(\r\n            !fetchUrl ? `${baseUrl}/me/playlists` : fetchUrl\r\n        ).then((playlistJson) => new PlaylistPagingRecord(playlistJson));\r\n    };\r\n\r\n    const _getCurrentUserProfile = async (): Promise<UserRecord> => {\r\n        return await _spotifyFetch<SpotifyUser>(`${baseUrl}/me`).then(\r\n            (user) => new UserRecord(user)\r\n        );\r\n    };\r\n\r\n    const _getPlaylist = async (id: string): Promise<PlaylistRecord> => {\r\n        return await _spotifyFetch<SpotifyPlaylist>(\r\n            `${baseUrl}/playlists/${id}`\r\n        ).then((playlistJson) => new PlaylistRecord(playlistJson));\r\n    };\r\n\r\n    const _getTracklist = async (\r\n        url: string\r\n    ): Promise<SpotifyPaging<SpotifyTrackWithMetadata>> => {\r\n        return await _spotifyFetch<SpotifyPaging<SpotifyTrackWithMetadata>>(\r\n            url\r\n        );\r\n    };\r\n\r\n    return {\r\n        setAccessToken: _setAccessToken,\r\n        getCurrentUserPlaylists: _getCurrentUserPlaylists,\r\n        getCurrentUserProfile: _getCurrentUserProfile,\r\n        getPlaylist: _getPlaylist,\r\n        getTracklist: _getTracklist,\r\n    };\r\n})();\r\n","import {\r\n    SpotifyApiService,\r\n    ISpotifyApiService,\r\n} from \"../services/spotify/spotify-service\";\r\nimport { createContext } from \"react\";\r\n\r\ninterface SpotifyContext {\r\n    spotifyApi: ISpotifyApiService;\r\n}\r\n\r\nexport const Spotify = createContext<SpotifyContext>({\r\n    spotifyApi: SpotifyApiService,\r\n});\r\n","import { useContext } from \"react\";\r\nimport { Spotify } from \"../context/spotify\";\r\n\r\n// Hook\r\nexport function useSpotifyApi() {\r\n    const { spotifyApi } = useContext(Spotify);\r\n\r\n    return spotifyApi;\r\n}\r\n","import { useRouter } from \"../../hooks/router-hooks\";\r\nimport React from \"react\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\n\r\nexport interface SpotifyTokenParams {\r\n    token_type?: string;\r\n    access_token?: string;\r\n    state?: string;\r\n}\r\n\r\nexport const SpotifyCallback = () => {\r\n    const { location } = useRouter();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const params = location.hash\r\n        .substr(1)\r\n        .split(\"&\")\r\n        .map((v) => v.split(\"=\"))\r\n        .reduce(\r\n            (pre, [key, value]) => ({ ...pre, [key]: value }),\r\n            {}\r\n        ) as SpotifyTokenParams;\r\n\r\n    if (!!params.token_type && !!params.access_token) {\r\n        spotifyApi.setAccessToken(params.token_type, params.access_token);\r\n\r\n        if (!!params.state) {\r\n            var state = decodeURIComponent(params.state);\r\n            var { redirect_uri } = JSON.parse(state);\r\n\r\n            if (!!redirect_uri) {\r\n                window.location.href = redirect_uri;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <p>There was an error connecting to Spotify...</p>;\r\n};\r\n","import React, { forwardRef } from \"react\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\nimport { ImageRecord } from \"../../view-models/core/image-record\";\r\nimport { List } from \"immutable\";\r\n\r\nexport interface TrackListingProps {\r\n    track: SpotifyTrackWithMetadata;\r\n}\r\n\r\nexport const TrackListing = forwardRef<HTMLDivElement, TrackListingProps>(\r\n    ({ track }, ref) => {\r\n        const artists = (!track.track.artists ? [] : track.track.artists)\r\n            .filter((a) => !!a && !!a.name)\r\n            .map((a) => a.name)\r\n            .join(\", \");\r\n\r\n        const trackImageUrl = List(\r\n            track.track.album.images.map((i) => new ImageRecord(i))\r\n        )\r\n            .skip(1)\r\n            .first(new ImageRecord()).url;\r\n\r\n        return (\r\n            <div ref={ref} className=\"border-gray-400 border-t p-4\">\r\n                <div className=\"flex\">\r\n                    <div className=\"h-32 w-32 flex-none\">\r\n                        <img\r\n                            className=\"h-full w-full object-cover\"\r\n                            src={trackImageUrl}\r\n                            alt={`${track.track.name} cover`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"m-2 flex-grow\">\r\n                        <h3 className=\"text-sm font-medium\">\r\n                            {track.track.name}\r\n                        </h3>\r\n                        <h4 className=\"text-xs text-gray-700 font-medium\">\r\n                            {artists}\r\n                        </h4>\r\n                        <h5 className=\"text-xs font-medium\">\r\n                            {track.track.album.name}\r\n                        </h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","import React from \"react\";\r\n\r\ninterface LoaderProps {\r\n    message: string;\r\n}\r\n\r\nexport const Loader = ({ message }: LoaderProps) => (\r\n    <div className=\"font-semibold border-gray-400 border-t p-4\">\r\n        <svg\r\n            className=\"fill-current text-gray-900 inline-block h-4 w-4 align-baseline\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 55 80\">\r\n            <g transform=\"matrix(1 0 0 -1 0 80)\">\r\n                <rect width=\"10\" height=\"20\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"4.3s\"\r\n                        values=\"20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n                <rect x=\"15\" width=\"10\" height=\"80\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"2s\"\r\n                        values=\"80;55;33;5;75;23;73;33;12;14;60;80\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n                <rect x=\"30\" width=\"10\" height=\"50\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"1.4s\"\r\n                        values=\"50;34;78;23;56;23;34;76;80;54;21;50\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n                <rect x=\"45\" width=\"10\" height=\"30\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"2s\"\r\n                        values=\"30;45;13;80;56;72;45;76;34;23;67;30\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n            </g>\r\n        </svg>\r\n        <span className=\"align-baseline pl-1\">{message}</span>\r\n    </div>\r\n);\r\n","import React, {\r\n    FC,\r\n    useEffect,\r\n    useState,\r\n    useRef,\r\n    ForwardRefExoticComponent,\r\n    PropsWithoutRef,\r\n    PropsWithRef,\r\n    useCallback,\r\n} from \"react\";\r\nimport { List } from \"immutable\";\r\n\r\nexport type RowTemplateFactory = [\r\n    PropsWithoutRef<any> & Partial<{ key: any }>,\r\n    ForwardRefExoticComponent<PropsWithRef<any> & Partial<{ key: any }>>\r\n];\r\n\r\ninterface InfiniteScrollerProps {\r\n    hasMore: boolean;\r\n    itemRowTemplate: (val: any) => RowTemplateFactory;\r\n    items: List<any>;\r\n    onLoadMoreItems: () => void;\r\n    triggerOffsetCount?: number;\r\n}\r\n\r\nexport const InfiniteScroller: FC<InfiniteScrollerProps> = ({\r\n    hasMore,\r\n    itemRowTemplate,\r\n    items,\r\n    onLoadMoreItems,\r\n    triggerOffsetCount,\r\n}) => {\r\n    const [pageHeight, setPageHeight] = useState(\r\n        window.innerHeight || document.documentElement.clientHeight\r\n    );\r\n    const loadMoreTriggerTrackRef = useRef<HTMLElement>();\r\n\r\n    const onScroll = useCallback(() => {\r\n        if (\r\n            !loadMoreTriggerTrackRef ||\r\n            !loadMoreTriggerTrackRef.current ||\r\n            !hasMore\r\n        )\r\n            return;\r\n\r\n        const rect = ((loadMoreTriggerTrackRef.current as unknown) as HTMLElement).getBoundingClientRect();\r\n\r\n        const shouldLoadMore = rect.top >= 0 && rect.bottom <= pageHeight;\r\n\r\n        if (shouldLoadMore) {\r\n            onLoadMoreItems();\r\n        }\r\n    }, [hasMore, loadMoreTriggerTrackRef, onLoadMoreItems, pageHeight]);\r\n\r\n    // Watch window scroll/resize\r\n    useEffect(() => {\r\n        const onResize = (ev: any) => {\r\n            let calculatedPageHeight = ev.target.innerHeight;\r\n\r\n            if (!!ev.target.document && !!ev.target.document.documentElement) {\r\n                calculatedPageHeight =\r\n                    calculatedPageHeight ||\r\n                    ev.target.document.documentElement.clientHeight;\r\n            }\r\n\r\n            if (calculatedPageHeight) {\r\n                setPageHeight(calculatedPageHeight);\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"scroll\", onScroll);\r\n        window.addEventListener(\"resize\", onResize);\r\n\r\n        onScroll();\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", onScroll);\r\n            window.removeEventListener(\"resize\", onResize);\r\n        };\r\n    }, [onScroll]);\r\n\r\n    if (!triggerOffsetCount) {\r\n        triggerOffsetCount = 0;\r\n    }\r\n\r\n    if (!items) return null;\r\n\r\n    const listLength = items.count();\r\n    const triggerElementIndex =\r\n        listLength <= triggerOffsetCount ? 0 : listLength - triggerOffsetCount;\r\n\r\n    return (\r\n        <>\r\n            {items.map((t, i) => {\r\n                let [itemProps, ItemTemplate] = itemRowTemplate(t);\r\n\r\n                if (i === triggerElementIndex) {\r\n                    itemProps = {\r\n                        ...itemProps,\r\n                        ref: loadMoreTriggerTrackRef,\r\n                    };\r\n                }\r\n\r\n                return <ItemTemplate {...itemProps} />;\r\n            })}\r\n        </>\r\n    );\r\n};\r\n","import React, { useMemo, useState } from \"react\";\r\n\r\nexport enum SwitchCheckboxAlignment {\r\n    Left,\r\n    Right,\r\n}\r\n\r\ninterface SwitchCheckboxProps {\r\n    alignment?: SwitchCheckboxAlignment;\r\n    className?: string;\r\n    isChecked: boolean;\r\n    showDisplayValue?: boolean;\r\n    checkedDisplayValue?: string;\r\n    unCheckedDisplayValue?: string;\r\n    onChange?: (nextValue: boolean) => void;\r\n}\r\n\r\nexport const SwitchCheckbox = ({\r\n    alignment = SwitchCheckboxAlignment.Left,\r\n    className,\r\n    isChecked,\r\n    showDisplayValue = true,\r\n    checkedDisplayValue,\r\n    unCheckedDisplayValue,\r\n    onChange,\r\n}: SwitchCheckboxProps) => {\r\n    const [checked, setChecked] = useState(isChecked);\r\n\r\n    const switchText = (placement: SwitchCheckboxAlignment) => {\r\n        if (!showDisplayValue || placement !== alignment) return;\r\n\r\n        const paddingClassName =\r\n            alignment === SwitchCheckboxAlignment.Left ? \"pr-2\" : \"pl-2\";\r\n\r\n        return (\r\n            <span className={`flex-shrink ${paddingClassName}`}>\r\n                {checked ? checkedDisplayValue : unCheckedDisplayValue}\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const switchClassNames = useMemo(() => {\r\n        const additionalClassNames = isChecked\r\n            ? \"bg-green-300 justify-end\"\r\n            : \"bg-gray-300 justify-start\";\r\n\r\n        return `border rounded-full border-gray-900 flex items-center w-12 ${additionalClassNames}`;\r\n    }, [isChecked]);\r\n\r\n    const onClick = () =>\r\n        setChecked((prevCheckedValue) => {\r\n            const nextCheckedValue = !prevCheckedValue;\r\n\r\n            if (!!onChange) {\r\n                onChange(nextCheckedValue);\r\n            }\r\n\r\n            return nextCheckedValue;\r\n        });\r\n\r\n    return (\r\n        <span\r\n            className={`inline-flex cursor-pointer ${className}`}\r\n            onClick={onClick}>\r\n            {switchText(SwitchCheckboxAlignment.Left)}\r\n\r\n            <span className={switchClassNames}>\r\n                <span className=\"rounded-full border w-6 h-6 border-gray-900 shadow-inner bg-white shadow\"></span>\r\n            </span>\r\n\r\n            {switchText(SwitchCheckboxAlignment.Right)}\r\n        </span>\r\n    );\r\n};\r\n","import { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport React, { useState, Fragment } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { ImageRecord } from \"../../view-models/core/image-record\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\nimport { TrackListing } from \"../../components/track-listing/track-listing\";\r\nimport { List } from \"immutable\";\r\nimport { Loader } from \"../../components/loader/loader\";\r\nimport {\r\n    InfiniteScroller,\r\n    RowTemplateFactory,\r\n} from \"../../components/infinite-scroller/infinite-scroller\";\r\n\r\nexport const Playlist = () => {\r\n    const { id } = useParams();\r\n    const [playlist, setPlaylist] = useState<PlaylistRecord>();\r\n    const [tracklist, setTracklist] = useState<List<SpotifyTrackWithMetadata>>(\r\n        List([])\r\n    );\r\n    const [hasMore, setHasMore] = useState(true);\r\n    const [loadNext, setLoadNext] = useState(false);\r\n    const [nextTracksUri, setNextTracksUri] = useState<string>();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const TrackListingTemplate = (\r\n        track: SpotifyTrackWithMetadata\r\n    ): RowTemplateFactory => [\r\n        { track: track, key: track.track.id },\r\n        TrackListing,\r\n    ];\r\n\r\n    // Load Initial Data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const playlist = await spotifyApi.getPlaylist(id!);\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setLoadNext(false);\r\n        setNextTracksUri(playlist.tracks.next);\r\n        setPlaylist(playlist);\r\n        setTracklist(tracklist.push(...playlist.tracks.items));\r\n        setHasMore(!!playlist.tracks.next);\r\n    }, []);\r\n\r\n    // Load more data\r\n    useAsyncEffect(\r\n        async (isMounted) => {\r\n            if (!loadNext || !nextTracksUri) return;\r\n\r\n            const nextTracklistPage = await spotifyApi.getTracklist(\r\n                nextTracksUri\r\n            );\r\n\r\n            if (!isMounted()) return;\r\n\r\n            setLoadNext(false);\r\n            setNextTracksUri(nextTracklistPage.next);\r\n            setTracklist((prevTracklist) =>\r\n                prevTracklist.push(...nextTracklistPage.items)\r\n            );\r\n            setHasMore(!!nextTracklistPage.next);\r\n        },\r\n        [loadNext, nextTracksUri]\r\n    );\r\n\r\n    if (!playlist) {\r\n        return null;\r\n    }\r\n\r\n    const LoadingTracks = () => {\r\n        if (!loadNext || !playlist || !nextTracksUri) return null;\r\n\r\n        return <Loader message=\"Loading tracks...\" />;\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div>\r\n                <h2 className=\"antialiased text-sm font-bold uppercase tracking-widest\">\r\n                    {playlist.name}\r\n                </h2>\r\n                <div className=\"flex\">\r\n                    <div className=\"h-64 w-64 flex-none\">\r\n                        <img\r\n                            className=\"h-full w-full object-cover\"\r\n                            src={playlist.images.first(new ImageRecord()).url}\r\n                            alt={`${playlist.name} cover`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"m-2 flex-grow\">\r\n                        <h3 className=\"text-sm text-gray-800\">\r\n                            {playlist.tracks.total} songs\r\n                        </h3>\r\n                        <span className=\"block text-xs text-gray-700\">\r\n                            by {playlist.owner.display_name}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"font-semibold mt-4\">Tracks</div>\r\n\r\n                <InfiniteScroller\r\n                    hasMore={hasMore}\r\n                    itemRowTemplate={TrackListingTemplate}\r\n                    items={tracklist}\r\n                    onLoadMoreItems={() => setLoadNext(true)}\r\n                    triggerOffsetCount={10}\r\n                />\r\n\r\n                <LoadingTracks />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface NavBarProps {\r\n    onOpen?: () => void;\r\n}\r\n\r\ninterface SvgMenuIconProps {\r\n    isOpen: boolean;\r\n}\r\n\r\nconst SvgMenuIcon = ({ isOpen }: SvgMenuIconProps) => {\r\n    const path = isOpen ? (\r\n        <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z\"\r\n        />\r\n    ) : (\r\n        <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z\"\r\n        />\r\n    );\r\n\r\n    return (\r\n        <svg className=\"h-6 w-6 fill-current\" viewBox=\"0 0 24 24\">\r\n            {path}\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport const NavBar = ({ onOpen }: NavBarProps) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    let menuClass = \"px-2 pt-2 pb-4 \";\r\n    menuClass += isOpen ? \"block\" : \"hidden\";\r\n\r\n    const onMenuClick = () => {\r\n        setIsOpen((prevState) => !prevState);\r\n\r\n        if (!!onOpen) {\r\n            onOpen();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <header className=\"bg-gray-900 w-screen fixed w-screen fixed text-white font-bold z-10\">\r\n                <div className=\"flex items-center justify-between px-4 py-3\">\r\n                    <div>\r\n                        <h1 className=\"uppercase\">Crowd Source Radio</h1>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            onClick={onMenuClick}\r\n                            type=\"button\"\r\n                            className=\"block text-gray-500 hover:text-white focus:text-white focus:outline-none\">\r\n                            <SvgMenuIcon isOpen={isOpen} />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className={menuClass}>\r\n                    <Link\r\n                        to=\"/\"\r\n                        className=\"block px-2 py-1 text-white font-semibold rounded hover:bg-gray-800\">\r\n                        Playlists\r\n                    </Link>\r\n                    <Link\r\n                        to=\"/browse\"\r\n                        className=\"block px-2 py-1 text-white font-semibold rounded hover:bg-gray-800\">\r\n                        Browse\r\n                    </Link>\r\n                </div>\r\n            </header>\r\n            <div className=\"bg-gray-400 border-gray-600 border-b w-screen fixed w-screen fixed top-12 shadow pl-4 pr-4 pt-2 pb-2 font-semibold text-gray-900 align-middle flex flex-row\">\r\n                <Link className=\"flex-shrink\" to=\"/playlists/mine\">\r\n                    My Playlists\r\n                </Link>\r\n                <Link\r\n                    className=\"flex-shrink pl-4 text-gray-600 hover:text-gray-900\"\r\n                    to=\"/playlists/following\">\r\n                    Following\r\n                </Link>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { NavBar } from \"../components/nav-bar/nav-bar\";\r\n\r\ninterface DefaultLayoutProps {}\r\n\r\nconst DefaultLayout = ({\r\n    children,\r\n}: React.PropsWithChildren<DefaultLayoutProps>) => {\r\n    return (\r\n        <Fragment>\r\n            <NavBar />\r\n            <div id=\"body\" className=\"p-4 pt-22\">\r\n                {children}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default DefaultLayout;\r\n","import React, { forwardRef } from \"react\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { ImageRecord } from \"../../view-models/core/image-record\";\r\nimport { useRouter } from \"../../hooks/router-hooks\";\r\n\r\nexport interface PlaylistCardProps {\r\n    playlist: PlaylistRecord;\r\n}\r\n\r\nexport const PlaylistCard = forwardRef<HTMLButtonElement, PlaylistCardProps>(\r\n    ({ playlist }, ref) => {\r\n        const image = playlist.images.first() as ImageRecord;\r\n        const router = useRouter();\r\n\r\n        const gotoPlaylist = () =>\r\n            router.history.push(`/playlist/${playlist.id}`);\r\n\r\n        return (\r\n            <button\r\n                ref={ref}\r\n                onClick={gotoPlaylist}\r\n                className=\"block flex my-4 w-full rounded-lg bg-gray-600 overflow-hidden flex text-white text-left focus:outline-none focus:border-gray-600 focus:shadow-outline\">\r\n                <div className=\"h-32 w-32 flex-none\">\r\n                    <img\r\n                        className=\"h-full w-full object-cover\"\r\n                        src={image.url}\r\n                        alt={`${playlist.name} cover`}\r\n                    />\r\n                </div>\r\n                <div className=\"m-2 flex-grow\">\r\n                    <h2 className=\"font-semibold overflow-hidden h-6\">\r\n                        {playlist.name}\r\n                    </h2>\r\n                    <h3 className=\"text-sm text-gray-100\">\r\n                        {playlist.tracks.total} songs\r\n                    </h3>\r\n                    <span className=\"block text-xs text-gray-300\">\r\n                        by {playlist.owner.display_name}\r\n                    </span>\r\n                </div>\r\n            </button>\r\n        );\r\n    }\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { PlaylistCard } from \"../playlist-card/playlist-card\";\r\nimport { List } from \"immutable\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport {\r\n    InfiniteScroller,\r\n    RowTemplateFactory,\r\n} from \"../infinite-scroller/infinite-scroller\";\r\nimport { Loader } from \"../loader/loader\";\r\n\r\ninterface PlaylistListProps {\r\n    playlistFilter?: (playlist: PlaylistRecord) => boolean;\r\n}\r\n\r\nconst PlaylistList = ({ playlistFilter = (_) => true }: PlaylistListProps) => {\r\n    const [hasMore, setHasMore] = useState(true);\r\n    const [loadNext, setLoadNext] = useState(false);\r\n    const [playlists, setPlaylists] = useState<List<PlaylistRecord>>(List([]));\r\n    const [nextPlaylistPageUri, setNextPlaylistPageUri] = useState<string>();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const PlaylistCardTemplate = (\r\n        playlist: PlaylistRecord\r\n    ): RowTemplateFactory => [\r\n        { playlist: playlist, key: playlist.id },\r\n        PlaylistCard,\r\n    ];\r\n\r\n    // Load initial data\r\n    useAsyncEffect(\r\n        async (isMounted) => {\r\n            const playlistPage = await spotifyApi.getCurrentUserPlaylists();\r\n\r\n            if (!isMounted()) return;\r\n\r\n            const playlistRecords = playlistPage.items.filter(playlistFilter);\r\n\r\n            setPlaylists(List([]));\r\n            setPlaylists(playlistRecords);\r\n            setLoadNext(false);\r\n            setNextPlaylistPageUri(playlistPage.next);\r\n            setHasMore(!!playlistPage.next);\r\n        },\r\n        [playlistFilter]\r\n    );\r\n\r\n    // Load more data\r\n    useAsyncEffect(\r\n        async (isMounted) => {\r\n            if (!nextPlaylistPageUri || !loadNext) return;\r\n\r\n            const nextPlaylistPage = await spotifyApi.getCurrentUserPlaylists(\r\n                nextPlaylistPageUri\r\n            );\r\n\r\n            if (!isMounted()) return;\r\n\r\n            setPlaylists((prevPlaylist) =>\r\n                prevPlaylist.merge(\r\n                    nextPlaylistPage.items.filter(playlistFilter)\r\n                )\r\n            );\r\n            setLoadNext(false);\r\n            setNextPlaylistPageUri(nextPlaylistPage.next);\r\n            setHasMore(!!nextPlaylistPage.next);\r\n        },\r\n        [loadNext, nextPlaylistPageUri]\r\n    );\r\n\r\n    const LoadingPlaylists = () => {\r\n        if (!loadNext || !nextPlaylistPageUri) return null;\r\n\r\n        return <Loader message=\"Loading playlists...\" />;\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <InfiniteScroller\r\n                hasMore={hasMore}\r\n                itemRowTemplate={PlaylistCardTemplate}\r\n                items={playlists}\r\n                onLoadMoreItems={() => setLoadNext(true)}\r\n                triggerOffsetCount={3}\r\n            />\r\n\r\n            <LoadingPlaylists />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PlaylistList;\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport {\r\n    SwitchCheckbox,\r\n    SwitchCheckboxAlignment,\r\n} from \"../../components/switch-checkbox/switch-checkbox\";\r\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst MyPlaylists = () => {\r\n    const [user, setUser] = useState<UserRecord>(() => new UserRecord());\r\n    const spotifyApi = useSpotifyApi();\r\n    let history = useHistory();\r\n\r\n    const filterByOwner = (user: UserRecord) => (playlist: PlaylistRecord) => {\r\n        const shouldDisplay =\r\n            !!user &&\r\n            playlist.owner.id === user.id &&\r\n            (playlist.public || playlist.collaborative);\r\n\r\n        return shouldDisplay;\r\n    };\r\n\r\n    // Load initial data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const user = await spotifyApi.getCurrentUserProfile();\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setUser(user);\r\n    }, []);\r\n\r\n    const onPlaylistVisibilityChanged = (_: boolean) =>\r\n        history.push(\"/playlists/all\");\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <SwitchCheckbox\r\n                alignment={SwitchCheckboxAlignment.Right}\r\n                className=\"align-middle mt-4 font-semibold\"\r\n                isChecked={false}\r\n                checkedDisplayValue=\"All Playlists\"\r\n                unCheckedDisplayValue=\"Public Playlists\"\r\n                onChange={onPlaylistVisibilityChanged}\r\n            />\r\n\r\n            <PlaylistList playlistFilter={filterByOwner(user)} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default MyPlaylists;\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\r\n\r\nconst FollowingPlaylists = () => {\r\n    const spotifyApi = useSpotifyApi();\r\n    const [user, setUser] = useState<UserRecord>(() => new UserRecord());\r\n\r\n    const filterNotByOwner = (user: UserRecord) => (\r\n        playlist: PlaylistRecord\r\n    ) => {\r\n        const shouldDisplay = !!user && playlist.owner.id !== user.id;\r\n\r\n        return shouldDisplay;\r\n    };\r\n\r\n    // Load initial data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const user = await spotifyApi.getCurrentUserProfile();\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setUser(user);\r\n    }, []);\r\n\r\n    return <PlaylistList playlistFilter={filterNotByOwner(user)} />;\r\n};\r\n\r\nexport default FollowingPlaylists;\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport {\r\n    SwitchCheckbox,\r\n    SwitchCheckboxAlignment,\r\n} from \"../../components/switch-checkbox/switch-checkbox\";\r\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AllMyPlaylists = () => {\r\n    const spotifyApi = useSpotifyApi();\r\n    let history = useHistory();\r\n    const [user, setUser] = useState<UserRecord>(() => new UserRecord());\r\n\r\n    const filterByOwner = (user: UserRecord) => (playlist: PlaylistRecord) => {\r\n        const shouldDisplay = !!user && playlist.owner.id === user.id;\r\n\r\n        return shouldDisplay;\r\n    };\r\n\r\n    // Load initial data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const user = await spotifyApi.getCurrentUserProfile();\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setUser(user);\r\n    }, []);\r\n\r\n    const onPlaylistVisibilityChanged = (_: boolean) =>\r\n        history.push(\"/playlists/mine\");\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <SwitchCheckbox\r\n                alignment={SwitchCheckboxAlignment.Right}\r\n                className=\"align-middle mt-4 font-semibold\"\r\n                isChecked={true}\r\n                checkedDisplayValue=\"All Playlists\"\r\n                unCheckedDisplayValue=\"Public Playlists\"\r\n                onChange={onPlaylistVisibilityChanged}\r\n            />\r\n\r\n            <PlaylistList playlistFilter={filterByOwner(user)} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AllMyPlaylists;\r\n","import React from \"react\";\r\nimport { useRouter } from \"../../hooks/router-hooks\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { SpotifyTokenParams } from \"../spotify-callback/spotify-callback\";\r\n\r\nexport const NotFound = () => {\r\n    const { location } = useRouter();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const params = location.pathname\r\n        .substr(1)\r\n        .split(\"&\")\r\n        .map((v) => v.split(\"=\"))\r\n        .reduce(\r\n            (pre, [key, value]) => ({ ...pre, [key]: value }),\r\n            {}\r\n        ) as SpotifyTokenParams;\r\n\r\n    if (!!params.token_type && !!params.access_token) {\r\n        spotifyApi.setAccessToken(params.token_type, params.access_token);\r\n\r\n        if (!!params.state) {\r\n            var state = decodeURIComponent(params.state);\r\n            var { redirect_uri } = JSON.parse(state);\r\n\r\n            if (!!redirect_uri) {\r\n                window.location.href = redirect_uri;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className=\"pt-4 text-gray-900 font-semibold text-lg\">\r\n            Uh oh. Page not found. :(\r\n        </p>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { SpotifyCallback } from \"./pages/spotify-callback/spotify-callback\";\r\nimport { Playlist } from \"./pages/playlist/playlist-page\";\r\nimport DefaultLayout from \"./layout/default-layout\";\r\nimport MyPlaylists from \"./pages/playlists/playlists-page\";\r\nimport FollowingPlaylists from \"./pages/playlists/playlists-following-page\";\r\nimport AllMyPlaylists from \"./pages/playlists/playlists-all-page\";\r\nimport { NotFound } from \"./pages/not-found/not-found-page\";\r\n\r\nconst App = () => {\r\n    useEffect(() => {\r\n        const BODY_BG_CLASS = \"bg-gray-100\";\r\n        document.body.classList.add(BODY_BG_CLASS);\r\n        return () => {\r\n            document.body.classList.remove(BODY_BG_CLASS);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Router>\r\n            <DefaultLayout>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <MyPlaylists />\r\n                    </Route>\r\n                    <Route exact path=\"/playlists/mine\">\r\n                        <MyPlaylists />\r\n                    </Route>\r\n                    <Route exact path=\"/playlists/all\">\r\n                        <AllMyPlaylists />\r\n                    </Route>\r\n                    <Route exact path=\"/playlists/following\">\r\n                        <FollowingPlaylists />\r\n                    </Route>\r\n                    <Route path=\"/callback\">\r\n                        <SpotifyCallback />\r\n                    </Route>\r\n                    <Route path=\"/playlist/:id\">\r\n                        <Playlist />\r\n                    </Route>\r\n                    <Route>\r\n                        <NotFound />\r\n                    </Route>\r\n                </Switch>\r\n            </DefaultLayout>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}