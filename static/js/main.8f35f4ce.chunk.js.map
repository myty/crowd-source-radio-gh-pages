{"version":3,"sources":["hooks/router-hooks.tsx","view-models/core/image-record.ts","view-models/core/reference-record.ts","view-models/core/user-record.ts","view-models/playlist/playlist-record.ts","view-models/playlist/playlist-paging-record.ts","services/spotify/spotify-service.ts","context/spotify.tsx","hooks/service-hooks.ts","pages/spotify-callback/spotify-callback.tsx","components/switch-checkbox/switch-checkbox.tsx","components/track-listing/track-listing.tsx","components/loader/loader.tsx","components/infinite-scroller/infinite-scroller.tsx","pages/playlist/playlist-page.tsx","components/nav-bar/nav-bar-background.tsx","components/nav-bar/nav-bar.tsx","layout/default-layout.tsx","components/playlist-card/playlist-card.tsx","components/playlist-list/playlist-list.tsx","pages/playlists/playlists-page.tsx","pages/playlists/playlists-following-page.tsx","pages/playlists/playlists-all-page.tsx","pages/not-found/not-found-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useRouter","params","useParams","location","useLocation","history","useHistory","match","useRouteMatch","useMemo","push","replace","pathname","query","queryString","parse","search","ImageRecord","value","this","merge","Record","height","url","width","ReferenceRecord","href","total","defaultValues","display_name","external_urls","Map","followers","id","images","List","product","type","uri","UserRecord","_transform","map","i","recordDefaults","collaborative","description","name","owner","public","snapshot_id","tracks","PlaylistRecord","items","limit","next","offset","previous","PlaylistPagingRecord","baseUrl","SpotifyApiService","_authenticate","origin","window","buildUrl","path","queryParams","response_type","client_id","scope","redirect_uri","state","JSON","stringify","_spotifyFetch","fetchUrl","a","spotify_auth","localStorage","getItem","token_type","access_token","fetch","headers","Authorization","response","status","json","setAccessToken","setItem","getCurrentUserPlaylists","then","playlistJson","getCurrentUserProfile","user","getPlaylist","getTracklist","Spotify","createContext","spotifyApi","useSpotifyApi","useContext","SwitchCheckboxAlignment","SpotifyCallback","hash","substr","split","v","reduce","pre","key","decodeURIComponent","TrackListing","forwardRef","ref","track","artists","filter","join","trackImageUrl","album","skip","first","className","src","alt","Loader","message","xmlns","viewBox","transform","rx","attributeName","begin","dur","values","calcMode","repeatCount","x","InfiniteScroller","hasMore","itemRowTemplate","onLoadMoreItems","triggerOffsetCount","useState","document","documentElement","clientHeight","pageHeight","setPageHeight","loadMoreTriggerTrackRef","useRef","useEffect","onResize","calculatedScrollerHeight","onScroll","current","rect","getBoundingClientRect","top","bottom","addEventListener","removeEventListener","listLength","count","triggerElementIndex","t","itemProps","ItemTemplate","Playlist","playlist","setPlaylist","tracklist","setTracklist","setHasMore","loadNext","setLoadNext","nextTracksUri","setNextTracksUri","useAsyncEffect","isMounted","nextTracklistPage","prevTracklist","NavBarBackground","isMenuOpen","onBackgroundClick","handleMenuClick","onClick","tabIndex","SvgMenuIcon","fillRule","d","SubMenuNavLink","isActive","label","to","classes","GoBackLink","goBack","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","SubMenuNavigation","links","baseMatch","playlistsMatch","followingPlaylistsMatch","isExact","length","linkProps","displayLinks","NavBar","setIsMenuOpen","menuClass","prevState","DefaultLayout","children","SwitchCheckbox","alignment","Left","isChecked","showDisplayValue","checkedDisplayValue","unCheckedDisplayValue","onChange","checked","setChecked","switchText","placement","paddingClassName","switchClassNames","prevCheckedValue","nextCheckedValue","Right","PlaylistCard","image","router","PlaylistList","playlistFilter","_","playlists","setPlaylists","nextPlaylistPageUri","setNextPlaylistPageUri","playlistPage","playlistRecords","nextPlaylistPage","prevPlaylist","Fragment","MyPlaylists","setUser","filterByOwner","FollowingPlaylists","filterNotByOwner","AllMyPlaylists","NotFound","App","BODY_CLASSES","body","classList","add","remove","exact","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f35f4ce.chunk.js","sourcesContent":["import {\r\n    useParams,\r\n    useLocation,\r\n    useHistory,\r\n    useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport { useMemo } from \"react\";\r\nimport queryString from \"query-string\";\r\n\r\n// Hook\r\nexport function useRouter() {\r\n    const params = useParams();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const match = useRouteMatch();\r\n\r\n    // Return our custom router object\r\n    // Memoize so that a new object is only returned if something changes\r\n    return useMemo(() => {\r\n        return {\r\n            // For convenience add push(), replace(), pathname at top level\r\n            push: history.push,\r\n            replace: history.replace,\r\n            pathname: location.pathname,\r\n            // Merge params and parsed query string into single \"query\" object\r\n            // so that they can be used interchangeably.\r\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\r\n            query: {\r\n                ...queryString.parse(location.search), // Convert string to object\r\n                ...params,\r\n            },\r\n            // Include match, location, history objects so we have\r\n            // access to extra React Router functionality if needed.\r\n            match,\r\n            location,\r\n            history,\r\n        };\r\n    }, [params, match, location, history]);\r\n}\r\n","import { Record } from \"immutable\";\r\nimport { SpotifyImage } from \"../../dtos/Spotify/core\";\r\n\r\nconst recordDefaults = {\r\n    height: 128,\r\n    url: \"https://via.placeholder.com/128\",\r\n    width: 128,\r\n};\r\n\r\nexport class ImageRecord extends Record(recordDefaults, \"Image\") {\r\n    constructor(params?: Partial<SpotifyImage>) {\r\n        params ? super(params) : super();\r\n    }\r\n\r\n    with(value: Partial<SpotifyImage>): ImageRecord {\r\n        return this.merge(value);\r\n    }\r\n}\r\n","import { Record } from \"immutable\";\r\nimport { SpotifyReference } from \"../../dtos/Spotify/core\";\r\n\r\nexport class ReferenceRecord extends Record(\r\n    {\r\n        href: \"\",\r\n        total: 0,\r\n    },\r\n    \"Reference\"\r\n) {\r\n    constructor(params?: Partial<SpotifyReference | ReferenceRecord>) {\r\n        params ? super(params) : super();\r\n    }\r\n\r\n    with(\r\n        params?: Partial<SpotifyReference | ReferenceRecord>\r\n    ): ReferenceRecord {\r\n        return params ? this.merge(params) : this;\r\n    }\r\n}\r\n","import { Map, Record, List } from \"immutable\";\r\nimport { SpotifyUser } from \"../../dtos/Spotify/core\";\r\nimport { ImageRecord } from \"./image-record\";\r\nimport { ReferenceRecord } from \"./reference-record\";\r\n\r\nconst defaultValues = {\r\n    display_name: \"\",\r\n    external_urls: Map<string>({}),\r\n    followers: new ReferenceRecord(),\r\n    href: \"\",\r\n    id: \"\",\r\n    images: List<ImageRecord>([]),\r\n    product: \"free\",\r\n    type: \"\",\r\n    uri: \"\",\r\n};\r\n\r\nexport class UserRecord extends Record(defaultValues, \"User\") {\r\n    private static _transform(params: Partial<SpotifyUser | UserRecord>) {\r\n        return {\r\n            ...params,\r\n            external_urls: Map<string>(params.external_urls ?? ({} as any)),\r\n            followers:\r\n                params.followers instanceof ReferenceRecord\r\n                    ? params.followers\r\n                    : new ReferenceRecord(params.followers),\r\n            images: List(params.images ?? []).map((i) =>\r\n                i instanceof ImageRecord ? i : new ImageRecord(i)\r\n            ),\r\n        };\r\n    }\r\n\r\n    constructor(params?: Partial<SpotifyUser | UserRecord>) {\r\n        if (!params) {\r\n            super();\r\n            return;\r\n        }\r\n\r\n        super({\r\n            ...params,\r\n            ...UserRecord._transform(params),\r\n        });\r\n    }\r\n\r\n    public with(params?: Partial<SpotifyUser | UserRecord>): UserRecord {\r\n        return params\r\n            ? this.merge({\r\n                  ...params,\r\n                  ...UserRecord._transform(params),\r\n              })\r\n            : this;\r\n    }\r\n}\r\n","import { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\r\nimport { List, Record, Map } from \"immutable\";\r\nimport { ImageRecord } from \"../core/image-record\";\r\nimport { UserRecord } from \"../core/user-record\";\r\nimport { SpotifyPaging } from \"../../dtos/Spotify/core\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\n\r\nconst recordDefaults = {\r\n    collaborative: false,\r\n    description: \"\",\r\n    external_urls: Map<string>({}),\r\n    href: (null as unknown) as string,\r\n    id: (null as unknown) as string,\r\n    images: List<ImageRecord>([]),\r\n    name: \"\",\r\n    owner: new UserRecord(),\r\n    public: false,\r\n    snapshot_id: \"\",\r\n    tracks: {} as SpotifyPaging<SpotifyTrackWithMetadata>,\r\n    type: \"playlist\",\r\n    uri: \"\",\r\n};\r\n\r\nexport class PlaylistRecord extends Record(recordDefaults, \"Playlist\") {\r\n    private static _transform(\r\n        params: Partial<SpotifyPlaylist | PlaylistRecord>\r\n    ) {\r\n        return {\r\n            ...params,\r\n            external_urls: Map<string>(params.external_urls ?? ({} as any)),\r\n            owner:\r\n                params.owner instanceof UserRecord\r\n                    ? params.owner\r\n                    : new UserRecord(params.owner),\r\n            images: List(\r\n                !params.images ? [new ImageRecord()] : params.images\r\n            ).map((i) => (i instanceof ImageRecord ? i : new ImageRecord(i))),\r\n        };\r\n    }\r\n\r\n    constructor(params?: Partial<SpotifyPlaylist | PlaylistRecord>) {\r\n        if (!params) {\r\n            super();\r\n            return;\r\n        }\r\n\r\n        super({\r\n            ...params,\r\n            ...PlaylistRecord._transform(params),\r\n        });\r\n    }\r\n\r\n    public with(\r\n        params: Partial<SpotifyPlaylist | PlaylistRecord>\r\n    ): PlaylistRecord {\r\n        return params\r\n            ? this.merge({\r\n                  ...params,\r\n                  ...PlaylistRecord._transform(params),\r\n              })\r\n            : this;\r\n    }\r\n}\r\n","import { List, Record } from \"immutable\";\r\nimport { SpotifyPaging } from \"../../dtos/Spotify/core\";\r\nimport { PlaylistRecord } from \"./playlist-record\";\r\nimport { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\r\n\r\nconst defaultValues = {\r\n    href: \"\",\r\n    items: List<PlaylistRecord>(),\r\n    limit: 0,\r\n    next: \"\",\r\n    offset: 0,\r\n    previous: \"\",\r\n    total: 0,\r\n};\r\n\r\nexport class PlaylistPagingRecord extends Record(defaultValues, \"Paging\") {\r\n    private static _transform(\r\n        params: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\r\n    ) {\r\n        let items: List<PlaylistRecord>;\r\n        if (!!params.items) {\r\n            items = List(\r\n                (params as SpotifyPaging<SpotifyPlaylist>).items\r\n            ).map((i: SpotifyPlaylist | PlaylistRecord) =>\r\n                i instanceof PlaylistRecord ? i : new PlaylistRecord(i)\r\n            );\r\n        } else {\r\n            items = List([]);\r\n        }\r\n\r\n        return {\r\n            ...params,\r\n            items,\r\n        };\r\n    }\r\n\r\n    constructor(\r\n        params?: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\r\n    ) {\r\n        if (!params) {\r\n            super();\r\n            return;\r\n        }\r\n\r\n        super({\r\n            ...params,\r\n            ...PlaylistPagingRecord._transform(params),\r\n        });\r\n    }\r\n\r\n    with(\r\n        params?: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\r\n    ): PlaylistPagingRecord {\r\n        return params\r\n            ? this.merge({\r\n                  ...params,\r\n                  ...PlaylistPagingRecord._transform(params),\r\n              })\r\n            : this;\r\n    }\r\n}\r\n","import { SpotifyPaging, SpotifyUser } from \"../../dtos/Spotify/core\";\r\nimport { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\r\nimport { PlaylistPagingRecord } from \"../../view-models/playlist/playlist-paging-record\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport buildUrl from \"build-url\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\n\r\nexport interface ISpotifyApiService {\r\n    setAccessToken: (token_type: string, access_token: string) => void;\r\n    getCurrentUserPlaylists: (\r\n        fetchUrl?: string\r\n    ) => Promise<PlaylistPagingRecord>;\r\n    getCurrentUserProfile: () => Promise<UserRecord>;\r\n    getPlaylist: (id: string) => Promise<PlaylistRecord>;\r\n    getTracklist: (\r\n        url: string\r\n    ) => Promise<SpotifyPaging<SpotifyTrackWithMetadata>>;\r\n}\r\n\r\nconst baseUrl = \"https://api.spotify.com/v1\";\r\nconst spotifyAccountsUrl = \"https://accounts.spotify.com\";\r\nconst client_id = \"3c5666e14ae14e39a0efc18f540d621e\";\r\nconst response_type = \"token\";\r\nconst scope =\r\n    \"user-read-private user-read-email playlist-read-private playlist-read-collaborative playlist-modify-public playlist-modify-private\";\r\n\r\nexport const SpotifyApiService: ISpotifyApiService = (function() {\r\n    const _authenticate = () => {\r\n        const { origin } = window.location;\r\n\r\n        const href = buildUrl(spotifyAccountsUrl, {\r\n            path: \"authorize\",\r\n            queryParams: {\r\n                response_type,\r\n                client_id,\r\n                scope,\r\n                redirect_uri: `${origin}`,\r\n                state: JSON.stringify({ redirect_uri: window.location.href }),\r\n            },\r\n        });\r\n\r\n        window.location.href = href;\r\n    };\r\n\r\n    const _spotifyFetch = async <T = any>(fetchUrl: string): Promise<T> => {\r\n        const spotify_auth = localStorage.getItem(\"spotify_auth\");\r\n\r\n        if (!spotify_auth) {\r\n            _authenticate();\r\n        }\r\n\r\n        const { token_type, access_token } = JSON.parse(spotify_auth as string);\r\n\r\n        if (!access_token || !token_type) {\r\n            _authenticate();\r\n        }\r\n\r\n        const response = await fetch(fetchUrl, {\r\n            headers: {\r\n                Authorization: `${token_type} ${access_token}`,\r\n            },\r\n        });\r\n\r\n        // Check if unauthenticated user\r\n        if (response.status === 401) {\r\n            _authenticate();\r\n        }\r\n\r\n        const json = await response.json();\r\n\r\n        return json;\r\n    };\r\n\r\n    const _setAccessToken = (token_type: string, access_token: string) => {\r\n        localStorage.setItem(\r\n            \"spotify_auth\",\r\n            JSON.stringify({\r\n                token_type,\r\n                access_token,\r\n            })\r\n        );\r\n    };\r\n\r\n    const _getCurrentUserPlaylists = async (\r\n        fetchUrl?: string\r\n    ): Promise<PlaylistPagingRecord> => {\r\n        return await _spotifyFetch<SpotifyPaging<SpotifyPlaylist>>(\r\n            fetchUrl ?? `${baseUrl}/me/playlists`\r\n        ).then((playlistJson) => new PlaylistPagingRecord(playlistJson));\r\n    };\r\n\r\n    const _getCurrentUserProfile = async (): Promise<UserRecord> => {\r\n        return await _spotifyFetch<SpotifyUser>(`${baseUrl}/me`).then(\r\n            (user) => new UserRecord(user)\r\n        );\r\n    };\r\n\r\n    const _getPlaylist = async (id: string): Promise<PlaylistRecord> => {\r\n        return await _spotifyFetch<SpotifyPlaylist>(\r\n            `${baseUrl}/playlists/${id}`\r\n        ).then((playlistJson) => new PlaylistRecord(playlistJson));\r\n    };\r\n\r\n    const _getTracklist = async (\r\n        url: string\r\n    ): Promise<SpotifyPaging<SpotifyTrackWithMetadata>> => {\r\n        return await _spotifyFetch<SpotifyPaging<SpotifyTrackWithMetadata>>(\r\n            url\r\n        );\r\n    };\r\n\r\n    return {\r\n        setAccessToken: _setAccessToken,\r\n        getCurrentUserPlaylists: _getCurrentUserPlaylists,\r\n        getCurrentUserProfile: _getCurrentUserProfile,\r\n        getPlaylist: _getPlaylist,\r\n        getTracklist: _getTracklist,\r\n    };\r\n})();\r\n","import {\r\n    SpotifyApiService,\r\n    ISpotifyApiService,\r\n} from \"../services/spotify/spotify-service\";\r\nimport { createContext } from \"react\";\r\n\r\ninterface SpotifyContext {\r\n    spotifyApi: ISpotifyApiService;\r\n}\r\n\r\nexport const Spotify = createContext<SpotifyContext>({\r\n    spotifyApi: SpotifyApiService,\r\n});\r\n","import { useContext } from \"react\";\r\nimport { Spotify } from \"../context/spotify\";\r\n\r\n// Hook\r\nexport function useSpotifyApi() {\r\n    const { spotifyApi } = useContext(Spotify);\r\n\r\n    return spotifyApi;\r\n}\r\n","import { useRouter } from \"../../hooks/router-hooks\";\r\nimport React from \"react\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\n\r\nexport interface SpotifyTokenParams {\r\n    token_type?: string;\r\n    access_token?: string;\r\n    state?: string;\r\n}\r\n\r\nexport const SpotifyCallback = () => {\r\n    const { location } = useRouter();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const params = location.hash\r\n        .substr(1)\r\n        .split(\"&\")\r\n        .map((v) => v.split(\"=\"))\r\n        .reduce(\r\n            (pre, [key, value]) => ({ ...pre, [key]: value }),\r\n            {}\r\n        ) as SpotifyTokenParams;\r\n\r\n    if (!!params.token_type && !!params.access_token) {\r\n        spotifyApi.setAccessToken(params.token_type, params.access_token);\r\n\r\n        if (!!params.state) {\r\n            var state = decodeURIComponent(params.state);\r\n            var { redirect_uri } = JSON.parse(state);\r\n\r\n            if (!!redirect_uri) {\r\n                window.location.href = redirect_uri;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <p>There was an error connecting to Spotify...</p>;\r\n};\r\n","import React, { useMemo, useState } from \"react\";\r\n\r\nexport enum SwitchCheckboxAlignment {\r\n    Left,\r\n    Right,\r\n}\r\n\r\ninterface SwitchCheckboxProps {\r\n    alignment?: SwitchCheckboxAlignment;\r\n    className?: string;\r\n    isChecked: boolean;\r\n    showDisplayValue?: boolean;\r\n    checkedDisplayValue?: string;\r\n    unCheckedDisplayValue?: string;\r\n    onChange?: (nextValue: boolean) => void;\r\n}\r\n\r\nexport const SwitchCheckbox = ({\r\n    alignment = SwitchCheckboxAlignment.Left,\r\n    className,\r\n    isChecked,\r\n    showDisplayValue = true,\r\n    checkedDisplayValue,\r\n    unCheckedDisplayValue,\r\n    onChange,\r\n}: SwitchCheckboxProps) => {\r\n    const [checked, setChecked] = useState(isChecked);\r\n\r\n    const switchText = (placement: SwitchCheckboxAlignment) => {\r\n        if (!showDisplayValue || placement !== alignment) return;\r\n\r\n        const paddingClassName =\r\n            alignment === SwitchCheckboxAlignment.Left ? \"pr-2\" : \"pl-2\";\r\n\r\n        return (\r\n            <span className={`flex-shrink ${paddingClassName}`}>\r\n                {checked ? checkedDisplayValue : unCheckedDisplayValue}\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const switchClassNames = useMemo(() => {\r\n        const additionalClassNames = isChecked\r\n            ? \"bg-green-300 justify-end\"\r\n            : \"bg-gray-300 justify-start\";\r\n\r\n        return `border rounded-full border-gray-900 flex items-center w-12 ${additionalClassNames}`;\r\n    }, [isChecked]);\r\n\r\n    const onClick = () =>\r\n        setChecked((prevCheckedValue) => {\r\n            const nextCheckedValue = !prevCheckedValue;\r\n\r\n            if (!!onChange) {\r\n                onChange(nextCheckedValue);\r\n            }\r\n\r\n            return nextCheckedValue;\r\n        });\r\n\r\n    return (\r\n        <span\r\n            className={`inline-flex cursor-pointer ${className}`}\r\n            onClick={onClick}>\r\n            {switchText(SwitchCheckboxAlignment.Left)}\r\n\r\n            <span className={switchClassNames}>\r\n                <span className=\"rounded-full border w-6 h-6 border-gray-900 shadow-inner bg-white shadow\"></span>\r\n            </span>\r\n\r\n            {switchText(SwitchCheckboxAlignment.Right)}\r\n        </span>\r\n    );\r\n};\r\n","import React, { forwardRef } from \"react\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\nimport { ImageRecord } from \"../../view-models/core/image-record\";\r\nimport { List } from \"immutable\";\r\n\r\nexport interface TrackListingProps {\r\n    track: SpotifyTrackWithMetadata;\r\n}\r\n\r\nexport const TrackListing = forwardRef<HTMLDivElement, TrackListingProps>(\r\n    ({ track }, ref) => {\r\n        const artists = (!track.track.artists ? [] : track.track.artists)\r\n            .filter((a) => !!a && !!a.name)\r\n            .map((a) => a.name)\r\n            .join(\", \");\r\n\r\n        const trackImageUrl = List(\r\n            track.track.album.images.map((i) => new ImageRecord(i))\r\n        )\r\n            .skip(1)\r\n            .first(new ImageRecord()).url;\r\n\r\n        return (\r\n            <div ref={ref} className=\"border-gray-400 border-t p-4\">\r\n                <div className=\"flex\">\r\n                    <div className=\"h-32 w-32 flex-none\">\r\n                        <img\r\n                            className=\"h-full w-full object-cover\"\r\n                            src={trackImageUrl}\r\n                            alt={`${track.track.name} cover`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"m-2 flex-grow\">\r\n                        <h3 className=\"text-sm font-medium\">\r\n                            {track.track.name}\r\n                        </h3>\r\n                        <h4 className=\"text-xs text-gray-700 font-medium\">\r\n                            {artists}\r\n                        </h4>\r\n                        <h5 className=\"text-xs font-medium\">\r\n                            {track.track.album.name}\r\n                        </h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n","import React from \"react\";\r\n\r\ninterface LoaderProps {\r\n    message: string;\r\n}\r\n\r\nexport const Loader = ({ message }: LoaderProps) => (\r\n    <div className=\"font-semibold border-gray-400 border-t p-4\">\r\n        <svg\r\n            className=\"fill-current text-gray-900 inline-block h-4 w-4 align-baseline\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 55 80\">\r\n            <g transform=\"matrix(1 0 0 -1 0 80)\">\r\n                <rect width=\"10\" height=\"20\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"4.3s\"\r\n                        values=\"20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n                <rect x=\"15\" width=\"10\" height=\"80\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"2s\"\r\n                        values=\"80;55;33;5;75;23;73;33;12;14;60;80\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n                <rect x=\"30\" width=\"10\" height=\"50\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"1.4s\"\r\n                        values=\"50;34;78;23;56;23;34;76;80;54;21;50\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n                <rect x=\"45\" width=\"10\" height=\"30\" rx=\"3\">\r\n                    <animate\r\n                        attributeName=\"height\"\r\n                        begin=\"0s\"\r\n                        dur=\"2s\"\r\n                        values=\"30;45;13;80;56;72;45;76;34;23;67;30\"\r\n                        calcMode=\"linear\"\r\n                        repeatCount=\"indefinite\"\r\n                    />\r\n                </rect>\r\n            </g>\r\n        </svg>\r\n        <span className=\"align-baseline pl-1\">{message}</span>\r\n    </div>\r\n);\r\n","import React, {\r\n    FC,\r\n    useEffect,\r\n    useState,\r\n    useRef,\r\n    ForwardRefExoticComponent,\r\n    PropsWithoutRef,\r\n    PropsWithRef,\r\n} from \"react\";\r\nimport { List } from \"immutable\";\r\n\r\nexport type RowTemplateFactory = [\r\n    PropsWithoutRef<any> & Partial<{ key: any }>,\r\n    ForwardRefExoticComponent<PropsWithRef<any> & Partial<{ key: any }>>\r\n];\r\n\r\ninterface InfiniteScrollerProps {\r\n    hasMore: boolean;\r\n    itemRowTemplate: (val: any) => RowTemplateFactory;\r\n    items: List<any>;\r\n    onLoadMoreItems: () => void;\r\n    triggerOffsetCount?: number;\r\n}\r\n\r\nexport const InfiniteScroller: FC<InfiniteScrollerProps> = ({\r\n    hasMore,\r\n    itemRowTemplate,\r\n    items,\r\n    onLoadMoreItems,\r\n    triggerOffsetCount = 0,\r\n}) => {\r\n    const [pageHeight, setPageHeight] = useState(\r\n        document.documentElement.clientHeight\r\n    );\r\n    const loadMoreTriggerTrackRef = useRef<HTMLElement>();\r\n\r\n    // Watch infinite scroller div scroll/resize\r\n    useEffect(() => {\r\n        const onResize = () => {\r\n            const calculatedScrollerHeight =\r\n                document.documentElement.clientHeight;\r\n\r\n            if (\r\n                !!calculatedScrollerHeight &&\r\n                calculatedScrollerHeight !== pageHeight\r\n            ) {\r\n                setPageHeight(calculatedScrollerHeight);\r\n            }\r\n        };\r\n\r\n        const onScroll = () => {\r\n            if (!loadMoreTriggerTrackRef?.current || !hasMore) return;\r\n\r\n            const rect = loadMoreTriggerTrackRef.current!.getBoundingClientRect();\r\n            const shouldLoadMore = rect.top >= 0 && rect.bottom <= pageHeight;\r\n\r\n            if (shouldLoadMore) {\r\n                onLoadMoreItems();\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"scroll\", onScroll, true);\r\n        window.addEventListener(\"resize\", onResize);\r\n\r\n        onScroll();\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", onResize);\r\n            window.removeEventListener(\"scroll\", onScroll);\r\n        };\r\n    }, [hasMore, pageHeight, onLoadMoreItems]);\r\n\r\n    if (!items) return null;\r\n\r\n    const listLength = items.count();\r\n    const triggerElementIndex =\r\n        listLength <= triggerOffsetCount ? 0 : listLength - triggerOffsetCount;\r\n\r\n    return (\r\n        <>\r\n            {items.map((t, i) => {\r\n                let [itemProps, ItemTemplate] = itemRowTemplate(t);\r\n\r\n                if (i === triggerElementIndex) {\r\n                    itemProps = {\r\n                        ...itemProps,\r\n                        ref: loadMoreTriggerTrackRef,\r\n                    };\r\n                }\r\n\r\n                return <ItemTemplate {...itemProps} />;\r\n            })}\r\n        </>\r\n    );\r\n};\r\n","import { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport React, { useState, Fragment } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { ImageRecord } from \"../../view-models/core/image-record\";\r\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\r\nimport { TrackListing } from \"../../components/track-listing/track-listing\";\r\nimport { List } from \"immutable\";\r\nimport { Loader } from \"../../components/loader/loader\";\r\nimport {\r\n    InfiniteScroller,\r\n    RowTemplateFactory,\r\n} from \"../../components/infinite-scroller/infinite-scroller\";\r\n\r\nexport const Playlist = () => {\r\n    const { id } = useParams();\r\n    const [playlist, setPlaylist] = useState<PlaylistRecord>();\r\n    const [tracklist, setTracklist] = useState<List<SpotifyTrackWithMetadata>>(\r\n        List([])\r\n    );\r\n    const [hasMore, setHasMore] = useState(true);\r\n    const [loadNext, setLoadNext] = useState(false);\r\n    const [nextTracksUri, setNextTracksUri] = useState<string>();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const TrackListingTemplate = (\r\n        track: SpotifyTrackWithMetadata\r\n    ): RowTemplateFactory => [\r\n        { track: track, key: track.track.id },\r\n        TrackListing,\r\n    ];\r\n\r\n    // Load Initial Data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const playlist = await spotifyApi.getPlaylist(id!);\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setLoadNext(false);\r\n        setNextTracksUri(playlist.tracks.next);\r\n        setPlaylist(playlist);\r\n        setTracklist(tracklist.push(...playlist.tracks.items));\r\n        setHasMore(!!playlist.tracks.next);\r\n    }, []);\r\n\r\n    // Load more data\r\n    useAsyncEffect(\r\n        async (isMounted) => {\r\n            if (!loadNext || !nextTracksUri) return;\r\n\r\n            const nextTracklistPage = await spotifyApi.getTracklist(\r\n                nextTracksUri\r\n            );\r\n\r\n            if (!isMounted()) return;\r\n\r\n            setLoadNext(false);\r\n            setNextTracksUri(nextTracklistPage.next);\r\n            setTracklist((prevTracklist) =>\r\n                prevTracklist.push(...nextTracklistPage.items)\r\n            );\r\n            setHasMore(!!nextTracklistPage.next);\r\n        },\r\n        [loadNext, nextTracksUri]\r\n    );\r\n\r\n    if (!playlist) {\r\n        return null;\r\n    }\r\n\r\n    const LoadingTracks = () => {\r\n        if (!loadNext || !playlist || !nextTracksUri) return null;\r\n\r\n        return <Loader message=\"Loading tracks...\" />;\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div>\r\n                <h2 className=\"antialiased text-sm font-bold uppercase tracking-widest\">\r\n                    {playlist.name}\r\n                </h2>\r\n                <div className=\"flex\">\r\n                    <div className=\"h-64 w-64 flex-none\">\r\n                        <img\r\n                            className=\"h-full w-full object-cover\"\r\n                            src={playlist.images.first(new ImageRecord()).url}\r\n                            alt={`${playlist.name} cover`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"m-2 flex-grow\">\r\n                        <h3 className=\"text-sm text-gray-800\">\r\n                            {playlist.tracks.total} songs\r\n                        </h3>\r\n                        <span className=\"block text-xs text-gray-700\">\r\n                            by {playlist.owner.display_name}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"font-semibold mt-4\">Tracks</div>\r\n\r\n                <InfiniteScroller\r\n                    hasMore={hasMore}\r\n                    itemRowTemplate={TrackListingTemplate}\r\n                    items={tracklist}\r\n                    onLoadMoreItems={() => setLoadNext(true)}\r\n                    triggerOffsetCount={10}\r\n                />\r\n\r\n                <LoadingTracks />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport React from \"react\";\r\n\r\nexport const NavBarBackground = ({\r\n    isMenuOpen,\r\n    onBackgroundClick,\r\n}: {\r\n    isMenuOpen: boolean;\r\n    onBackgroundClick: () => void;\r\n}) => {\r\n    useEffect(() => {\r\n        const handleMenuClick = () => onBackgroundClick();\r\n\r\n        if (isMenuOpen) {\r\n            document.addEventListener(\"click\", handleMenuClick);\r\n        }\r\n\r\n        return () => document.removeEventListener(\"click\", handleMenuClick);\r\n    }, [isMenuOpen, onBackgroundClick]);\r\n\r\n    if (!isMenuOpen) return null;\r\n\r\n    return (\r\n        <button\r\n            onClick={onBackgroundClick}\r\n            tabIndex={-1}\r\n            className=\"fixed inset-0 h-full w-full bg-black opacity-50 cursor-default\"></button>\r\n    );\r\n};\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { Link, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport { NavBarBackground } from \"./nav-bar-background\";\r\n\r\nconst SvgMenuIcon = ({ isMenuOpen }: { isMenuOpen: boolean }) => {\r\n    const path = isMenuOpen ? (\r\n        <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z\"\r\n        />\r\n    ) : (\r\n        <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z\"\r\n        />\r\n    );\r\n\r\n    return (\r\n        <svg className=\"h-6 w-6 fill-current\" viewBox=\"0 0 24 24\">\r\n            {path}\r\n        </svg>\r\n    );\r\n};\r\n\r\ninterface SubMenuNavLinkProps {\r\n    className?: string;\r\n    isActive?: boolean;\r\n    label: string;\r\n    to: string;\r\n}\r\n\r\nconst SubMenuNavLink = ({\r\n    className,\r\n    isActive,\r\n    label,\r\n    to,\r\n}: SubMenuNavLinkProps) => {\r\n    let classes = `${className} flex-shrink`;\r\n\r\n    if (!isActive) {\r\n        classes += \" text-gray-600 hover:text-gray-900\";\r\n    }\r\n\r\n    return (\r\n        <Link className={classes} to={to}>\r\n            {label}\r\n        </Link>\r\n    );\r\n};\r\n\r\nconst GoBackLink = () => {\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <button\r\n            onClick={() => history.goBack()}>\r\n            <svg\r\n                className=\"h-4 w-4 inline-block\"\r\n                viewBox=\"0 0 20 20\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\">\r\n                <line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\" />\r\n                <polyline points=\"12 19 5 12 12 5\" />\r\n            </svg>\r\n            <span className=\"align-middle ml-1 font-semibold\">Go Back</span>\r\n        </button>\r\n    );\r\n};\r\n\r\nconst SubMenuNavigation = () => {\r\n    let links: SubMenuNavLinkProps[] = [];\r\n    const baseMatch = useRouteMatch(\"/\");\r\n    const playlistsMatch = useRouteMatch(\"/playlists\");\r\n    const followingPlaylistsMatch = useRouteMatch(\"/playlists/following\");\r\n\r\n    if (playlistsMatch || (!!baseMatch && baseMatch.isExact)) {\r\n        links = [\r\n            {\r\n                to: \"/playlists/mine\",\r\n                label: \"My Playlists\",\r\n                isActive:\r\n                    !followingPlaylistsMatch ||\r\n                    !followingPlaylistsMatch.isExact,\r\n            },\r\n            {\r\n                to: \"/playlists/following\",\r\n                label: \"Following\",\r\n                isActive:\r\n                    !!followingPlaylistsMatch &&\r\n                    followingPlaylistsMatch.isExact,\r\n            },\r\n        ];\r\n    }\r\n\r\n    const displayLinks = (links: SubMenuNavLinkProps[]) => {\r\n        if (!links || !links.length) {\r\n            return <GoBackLink />;\r\n        }\r\n\r\n        return links.map((linkProps, i) => {\r\n            if (i > 0) {\r\n                linkProps = {\r\n                    ...linkProps,\r\n                    className: \"pl-4\",\r\n                };\r\n            }\r\n\r\n            return <SubMenuNavLink {...linkProps} key={linkProps.to} />;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-400 border-gray-600 border-b shadow px-4 py-2 font-semibold text-gray-900 align-middle flex flex-row\">\r\n            {displayLinks(links)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const NavBar = () => {\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n    let menuClass = \"px-2 pt-2 pb-4 \";\r\n    menuClass += isMenuOpen ? \"block\" : \"hidden\";\r\n\r\n    const onMenuClick = () => setIsMenuOpen((prevState) => !prevState);\r\n\r\n    return (\r\n        <Fragment>\r\n            <NavBarBackground\r\n                isMenuOpen={isMenuOpen}\r\n                onBackgroundClick={() => setIsMenuOpen(false)}\r\n            />\r\n            <nav className=\"fixed w-screen\">\r\n                <div className=\"bg-gray-900 text-white font-bold z-10 py-2\">\r\n                    <div className=\"flex items-center justify-between px-4 py-3\">\r\n                        <div>\r\n                            <h1 className=\"uppercase\">Crowd Source Radio</h1>\r\n                        </div>\r\n                        <div>\r\n                            <button\r\n                                onClick={onMenuClick}\r\n                                type=\"button\"\r\n                                className=\"block text-gray-500 hover:text-white focus:text-white focus:outline-none\">\r\n                                <SvgMenuIcon isMenuOpen={isMenuOpen} />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className={menuClass}>\r\n                        <Link\r\n                            to=\"/\"\r\n                            className=\"block px-2 py-1 text-white font-semibold rounded hover:bg-gray-800\">\r\n                            Playlists\r\n                        </Link>\r\n                        <Link\r\n                            to=\"/browse\"\r\n                            className=\"block px-2 py-1 text-white font-semibold rounded hover:bg-gray-800\">\r\n                            Browse\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <SubMenuNavigation />\r\n            </nav>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { NavBar } from \"../components/nav-bar/nav-bar\";\r\n\r\ninterface DefaultLayoutProps {}\r\n\r\nconst DefaultLayout = ({\r\n    children,\r\n}: React.PropsWithChildren<DefaultLayoutProps>) => {\r\n    return (\r\n        <Fragment>\r\n            <header className=\"h-26 select-none\">\r\n                <NavBar />\r\n            </header>\r\n            <section className=\"px-4 pt-4 h-screen-minus-26 overflow-y-auto\">\r\n                {children}\r\n            </section>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default DefaultLayout;\r\n","import React, { forwardRef } from \"react\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { ImageRecord } from \"../../view-models/core/image-record\";\r\nimport { useRouter } from \"../../hooks/router-hooks\";\r\n\r\nexport interface PlaylistCardProps {\r\n    playlist: PlaylistRecord;\r\n}\r\n\r\nexport const PlaylistCard = forwardRef<HTMLButtonElement, PlaylistCardProps>(\r\n    ({ playlist }, ref) => {\r\n        const image = playlist.images.first() as ImageRecord;\r\n        const router = useRouter();\r\n\r\n        const gotoPlaylist = () =>\r\n            router.history.push(`/playlist/${playlist.id}`);\r\n\r\n        return (\r\n            <button\r\n                ref={ref}\r\n                onClick={gotoPlaylist}\r\n                className=\"block flex mb-4 w-full rounded-lg bg-gray-600 overflow-hidden flex text-white text-left focus:outline-none focus:border-gray-600 focus:shadow-outline\">\r\n                <div className=\"h-32 w-32 flex-none\">\r\n                    <img\r\n                        className=\"h-full w-full object-cover\"\r\n                        src={image.url}\r\n                        alt={`${playlist.name} cover`}\r\n                    />\r\n                </div>\r\n                <div className=\"m-2 flex-grow\">\r\n                    <h2 className=\"font-semibold overflow-hidden h-6\">\r\n                        {playlist.name}\r\n                    </h2>\r\n                    <h3 className=\"text-sm text-gray-100\">\r\n                        {playlist.tracks.total} songs\r\n                    </h3>\r\n                    <span className=\"block text-xs text-gray-300\">\r\n                        by {playlist.owner.display_name}\r\n                    </span>\r\n                </div>\r\n            </button>\r\n        );\r\n    }\r\n);\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { PlaylistCard } from \"../playlist-card/playlist-card\";\r\nimport { List } from \"immutable\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport {\r\n    InfiniteScroller,\r\n    RowTemplateFactory,\r\n} from \"../infinite-scroller/infinite-scroller\";\r\nimport { Loader } from \"../loader/loader\";\r\n\r\ninterface PlaylistListProps {\r\n    playlistFilter?: (playlist: PlaylistRecord) => boolean;\r\n}\r\n\r\nconst PlaylistList = ({ playlistFilter = (_) => true }: PlaylistListProps) => {\r\n    const [hasMore, setHasMore] = useState(true);\r\n    const [loadNext, setLoadNext] = useState(false);\r\n    const [playlists, setPlaylists] = useState<List<PlaylistRecord>>(List([]));\r\n    const [nextPlaylistPageUri, setNextPlaylistPageUri] = useState<string>();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const PlaylistCardTemplate = (\r\n        playlist: PlaylistRecord\r\n    ): RowTemplateFactory => [\r\n        { playlist: playlist, key: playlist.id },\r\n        PlaylistCard,\r\n    ];\r\n\r\n    // Load initial data\r\n    useAsyncEffect(\r\n        async (isMounted) => {\r\n            const playlistPage = await spotifyApi.getCurrentUserPlaylists();\r\n\r\n            if (!isMounted()) return;\r\n\r\n            const playlistRecords = playlistPage.items.filter(playlistFilter);\r\n\r\n            setPlaylists(List([]));\r\n            setPlaylists(playlistRecords);\r\n            setLoadNext(false);\r\n            setNextPlaylistPageUri(playlistPage.next);\r\n            setHasMore(!!playlistPage.next);\r\n        },\r\n        [playlistFilter]\r\n    );\r\n\r\n    // Load more data\r\n    useAsyncEffect(\r\n        async (isMounted) => {\r\n            if (!nextPlaylistPageUri || !loadNext) return;\r\n\r\n            const nextPlaylistPage = await spotifyApi.getCurrentUserPlaylists(\r\n                nextPlaylistPageUri\r\n            );\r\n\r\n            if (!isMounted()) return;\r\n\r\n            setPlaylists((prevPlaylist) =>\r\n                prevPlaylist.merge(\r\n                    nextPlaylistPage.items.filter(playlistFilter)\r\n                )\r\n            );\r\n            setLoadNext(false);\r\n            setNextPlaylistPageUri(nextPlaylistPage.next);\r\n            setHasMore(!!nextPlaylistPage.next);\r\n        },\r\n        [loadNext, nextPlaylistPageUri]\r\n    );\r\n\r\n    const LoadingPlaylists = () => {\r\n        if (!loadNext || !nextPlaylistPageUri) return null;\r\n\r\n        return <Loader message=\"Loading playlists...\" />;\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <InfiniteScroller\r\n                hasMore={hasMore}\r\n                itemRowTemplate={PlaylistCardTemplate}\r\n                items={playlists}\r\n                onLoadMoreItems={() => setLoadNext(true)}\r\n                triggerOffsetCount={3}\r\n            />\r\n\r\n            <LoadingPlaylists />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default PlaylistList;\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport {\r\n    SwitchCheckbox,\r\n    SwitchCheckboxAlignment,\r\n} from \"../../components/switch-checkbox/switch-checkbox\";\r\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst MyPlaylists = () => {\r\n    const [user, setUser] = useState<UserRecord>(() => new UserRecord());\r\n    const spotifyApi = useSpotifyApi();\r\n    let history = useHistory();\r\n\r\n    const filterByOwner = (user: UserRecord) => (playlist: PlaylistRecord) => {\r\n        const shouldDisplay =\r\n            !!user &&\r\n            playlist.owner.id === user.id &&\r\n            (playlist.public || playlist.collaborative);\r\n\r\n        return shouldDisplay;\r\n    };\r\n\r\n    // Load initial data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const user = await spotifyApi.getCurrentUserProfile();\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setUser(user);\r\n    }, []);\r\n\r\n    const onPlaylistVisibilityChanged = (_: boolean) =>\r\n        history.push(\"/playlists/all\");\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <SwitchCheckbox\r\n                alignment={SwitchCheckboxAlignment.Right}\r\n                className=\"align-middle mb-4 font-semibold\"\r\n                isChecked={false}\r\n                checkedDisplayValue=\"All Playlists\"\r\n                unCheckedDisplayValue=\"Public Playlists\"\r\n                onChange={onPlaylistVisibilityChanged}\r\n            />\r\n\r\n            <PlaylistList playlistFilter={filterByOwner(user)} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default MyPlaylists;\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\r\n\r\nconst FollowingPlaylists = () => {\r\n    const spotifyApi = useSpotifyApi();\r\n    const [user, setUser] = useState<UserRecord>(() => new UserRecord());\r\n\r\n    const filterNotByOwner = (user: UserRecord) => (\r\n        playlist: PlaylistRecord\r\n    ) => {\r\n        const shouldDisplay = !!user && playlist.owner.id !== user.id;\r\n\r\n        return shouldDisplay;\r\n    };\r\n\r\n    // Load initial data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const user = await spotifyApi.getCurrentUserProfile();\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setUser(user);\r\n    }, []);\r\n\r\n    return <PlaylistList playlistFilter={filterNotByOwner(user)} />;\r\n};\r\n\r\nexport default FollowingPlaylists;\r\n","import React, { useState } from \"react\";\r\nimport { useAsyncEffect } from \"use-async-effect\";\r\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { UserRecord } from \"../../view-models/core/user-record\";\r\nimport {\r\n    SwitchCheckbox,\r\n    SwitchCheckboxAlignment,\r\n} from \"../../components/switch-checkbox/switch-checkbox\";\r\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AllMyPlaylists = () => {\r\n    const spotifyApi = useSpotifyApi();\r\n    const history = useHistory();\r\n    const [user, setUser] = useState(() => new UserRecord());\r\n    const filterByOwner = (user: UserRecord) => (playlist: PlaylistRecord) => {\r\n        const shouldDisplay = playlist.owner.id === user?.id;\r\n\r\n        return shouldDisplay;\r\n    };\r\n\r\n    // Load initial data\r\n    useAsyncEffect(async (isMounted) => {\r\n        const user = await spotifyApi.getCurrentUserProfile();\r\n\r\n        if (!isMounted()) return;\r\n\r\n        setUser(user);\r\n    }, []);\r\n\r\n    const onPlaylistVisibilityChanged = (_: boolean) =>\r\n        history.push(\"/playlists/mine\");\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <SwitchCheckbox\r\n                alignment={SwitchCheckboxAlignment.Right}\r\n                className=\"align-middle mb-4 font-semibold\"\r\n                isChecked={true}\r\n                checkedDisplayValue=\"All Playlists\"\r\n                unCheckedDisplayValue=\"Public Playlists\"\r\n                onChange={onPlaylistVisibilityChanged}\r\n            />\r\n\r\n            <PlaylistList playlistFilter={filterByOwner(user)} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AllMyPlaylists;\r\n","import React from \"react\";\r\nimport { useRouter } from \"../../hooks/router-hooks\";\r\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\r\nimport { SpotifyTokenParams } from \"../spotify-callback/spotify-callback\";\r\n\r\nexport const NotFound = () => {\r\n    const { location } = useRouter();\r\n    const spotifyApi = useSpotifyApi();\r\n\r\n    const params = location.pathname\r\n        .substr(1)\r\n        .split(\"&\")\r\n        .map((v) => v.split(\"=\"))\r\n        .reduce(\r\n            (pre, [key, value]) => ({ ...pre, [key]: value }),\r\n            {}\r\n        ) as SpotifyTokenParams;\r\n\r\n    if (!!params.token_type && !!params.access_token) {\r\n        spotifyApi.setAccessToken(params.token_type, params.access_token);\r\n\r\n        if (!!params.state) {\r\n            var state = decodeURIComponent(params.state);\r\n            var { redirect_uri } = JSON.parse(state);\r\n\r\n            if (!!redirect_uri) {\r\n                window.location.href = redirect_uri;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <p className=\"text-gray-900 font-semibold text-lg\">\r\n            Uh oh. Page not found. :(\r\n        </p>\r\n    );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { SpotifyCallback } from \"./pages/spotify-callback/spotify-callback\";\r\nimport { Playlist } from \"./pages/playlist/playlist-page\";\r\nimport DefaultLayout from \"./layout/default-layout\";\r\nimport MyPlaylists from \"./pages/playlists/playlists-page\";\r\nimport FollowingPlaylists from \"./pages/playlists/playlists-following-page\";\r\nimport AllMyPlaylists from \"./pages/playlists/playlists-all-page\";\r\nimport { NotFound } from \"./pages/not-found/not-found-page\";\r\n\r\nconst App = () => {\r\n    useEffect(() => {\r\n        const BODY_CLASSES = [\"bg-gray-100\", \"overflow-y-hidden\"];\r\n        document.body.classList.add(...BODY_CLASSES);\r\n        return () => {\r\n            document.body.classList.remove(...BODY_CLASSES);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Router>\r\n            <DefaultLayout>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <MyPlaylists />\r\n                    </Route>\r\n                    <Route exact path=\"/playlists/mine\">\r\n                        <MyPlaylists />\r\n                    </Route>\r\n                    <Route exact path=\"/playlists/all\">\r\n                        <AllMyPlaylists />\r\n                    </Route>\r\n                    <Route exact path=\"/playlists/following\">\r\n                        <FollowingPlaylists />\r\n                    </Route>\r\n                    <Route path=\"/callback\">\r\n                        <SpotifyCallback />\r\n                    </Route>\r\n                    <Route path=\"/playlist/:id\">\r\n                        <Playlist />\r\n                    </Route>\r\n                    <Route>\r\n                        <NotFound />\r\n                    </Route>\r\n                </Switch>\r\n            </DefaultLayout>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}