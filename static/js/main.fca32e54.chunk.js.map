{"version":3,"sources":["hooks/router-hooks.tsx","view-models/core/image-record.ts","view-models/core/reference-record.ts","view-models/core/user-record.ts","view-models/playlist/playlist-record.ts","view-models/playlist/playlist-paging-record.ts","services/spotify/spotify-service.ts","context/spotify.tsx","hooks/service-hooks.ts","pages/spotify-callback/spotify-callback.tsx","components/switch-checkbox/switch-checkbox.tsx","components/track-listing/track-listing.tsx","components/loader/loader.tsx","components/infinite-scroller/infinite-scroller.tsx","pages/playlist/playlist-page.tsx","components/nav-bar/nav-bar-background.tsx","components/nav-bar/nav-bar.tsx","layout/default-layout.tsx","components/playlist-card/playlist-card.tsx","components/playlist-list/playlist-list.tsx","pages/playlists/playlists-page.tsx","pages/playlists/playlists-following-page.tsx","pages/playlists/playlists-all-page.tsx","pages/not-found/not-found-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useRouter","params","useParams","location","useLocation","history","useHistory","match","useRouteMatch","useMemo","push","replace","pathname","query","queryString","parse","search","ImageRecord","value","this","merge","Record","height","url","width","ReferenceRecord","href","total","defaultValues","display_name","external_urls","Map","followers","id","images","List","product","type","uri","UserRecord","_transform","map","i","recordDefaults","collaborative","description","name","owner","public","snapshot_id","tracks","PlaylistRecord","items","limit","next","offset","previous","PlaylistPagingRecord","baseUrl","SpotifyApiService","_authenticate","origin","window","buildUrl","path","queryParams","response_type","client_id","scope","redirect_uri","state","JSON","stringify","_spotifyFetch","fetchUrl","a","spotify_auth","localStorage","getItem","token_type","access_token","fetch","headers","Authorization","response","status","json","setAccessToken","setItem","getCurrentUserPlaylists","then","playlistJson","getCurrentUserProfile","user","getPlaylist","getTracklist","Spotify","createContext","spotifyApi","useSpotifyApi","useContext","SwitchCheckboxAlignment","SpotifyCallback","hash","substr","split","v","reduce","pre","key","decodeURIComponent","TrackListing","forwardRef","ref","track","artists","filter","join","trackImageUrl","album","skip","first","className","src","alt","Loader","message","xmlns","viewBox","transform","rx","attributeName","begin","dur","values","calcMode","repeatCount","x","InfiniteScroller","hasMore","itemRowTemplate","onLoadMoreItems","triggerOffsetCount","useState","document","documentElement","clientHeight","pageHeight","setPageHeight","loadMoreTriggerTrackRef","useRef","useEffect","onResize","calculatedScrollerHeight","onScroll","current","rect","getBoundingClientRect","top","bottom","addEventListener","removeEventListener","listLength","count","triggerElementIndex","t","itemProps","ItemTemplate","Playlist","playlist","setPlaylist","tracklist","setTracklist","setHasMore","loadNext","setLoadNext","nextTracksUri","setNextTracksUri","useAsyncEffect","isMounted","nextTracklistPage","prevTracklist","LoadingTracks","NavBarBackground","isMenuOpen","onBackgroundClick","handleMenuClick","onClick","tabIndex","SvgMenuIcon","fillRule","d","SubMenuNavLink","isActive","label","to","classes","GoBackLink","goBack","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x1","y1","x2","y2","points","SubMenuNavigation","links","baseMatch","playlistsMatch","followingPlaylistsMatch","isExact","length","linkProps","displayLinks","NavBar","setIsMenuOpen","menuClass","prevState","DefaultLayout","children","SwitchCheckbox","alignment","Left","isChecked","showDisplayValue","checkedDisplayValue","unCheckedDisplayValue","onChange","checked","setChecked","switchText","placement","paddingClassName","switchClassNames","prevCheckedValue","nextCheckedValue","Right","PlaylistCard","image","router","PlaylistList","playlistFilter","_","playlists","setPlaylists","nextPlaylistPageUri","setNextPlaylistPageUri","playlistPage","playlistRecords","nextPlaylistPage","prevPlaylist","LoadingPlaylists","Fragment","MyPlaylists","setUser","filterByOwner","FollowingPlaylists","filterNotByOwner","AllMyPlaylists","NotFound","App","BODY_CLASSES","body","classList","add","remove","exact","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fca32e54.chunk.js","sourcesContent":["import {\n    useParams,\n    useLocation,\n    useHistory,\n    useRouteMatch,\n} from \"react-router-dom\";\nimport { useMemo } from \"react\";\nimport queryString from \"query-string\";\n\n// Hook\nexport function useRouter() {\n    const params = useParams();\n    const location = useLocation();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    // Return our custom router object\n    // Memoize so that a new object is only returned if something changes\n    return useMemo(() => {\n        return {\n            // For convenience add push(), replace(), pathname at top level\n            push: history.push,\n            replace: history.replace,\n            pathname: location.pathname,\n            // Merge params and parsed query string into single \"query\" object\n            // so that they can be used interchangeably.\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n            query: {\n                ...queryString.parse(location.search), // Convert string to object\n                ...params,\n            },\n            // Include match, location, history objects so we have\n            // access to extra React Router functionality if needed.\n            match,\n            location,\n            history,\n        };\n    }, [params, match, location, history]);\n}\n","import { Record } from \"immutable\";\nimport { SpotifyImage } from \"../../dtos/Spotify/core\";\n\nconst recordDefaults = {\n    height: 128,\n    url: \"https://via.placeholder.com/128\",\n    width: 128,\n};\n\nexport class ImageRecord extends Record(recordDefaults, \"Image\") {\n    constructor(params?: Partial<SpotifyImage>) {\n        params ? super(params) : super();\n    }\n\n    with(value: Partial<SpotifyImage>): ImageRecord {\n        return this.merge(value);\n    }\n}\n","import { Record } from \"immutable\";\nimport { SpotifyReference } from \"../../dtos/Spotify/core\";\n\nexport class ReferenceRecord extends Record(\n    {\n        href: \"\",\n        total: 0,\n    },\n    \"Reference\"\n) {\n    constructor(params?: Partial<SpotifyReference | ReferenceRecord>) {\n        params ? super(params) : super();\n    }\n\n    with(\n        params?: Partial<SpotifyReference | ReferenceRecord>\n    ): ReferenceRecord {\n        return params ? this.merge(params) : this;\n    }\n}\n","import { Map, Record, List } from \"immutable\";\nimport { SpotifyUser } from \"../../dtos/Spotify/core\";\nimport { ImageRecord } from \"./image-record\";\nimport { ReferenceRecord } from \"./reference-record\";\n\nconst defaultValues = {\n    display_name: \"\",\n    external_urls: Map<string>({}),\n    followers: new ReferenceRecord(),\n    href: \"\",\n    id: \"\",\n    images: List<ImageRecord>([]),\n    product: \"free\",\n    type: \"\",\n    uri: \"\",\n};\n\nexport class UserRecord extends Record(defaultValues, \"User\") {\n    private static _transform(params: Partial<SpotifyUser | UserRecord>) {\n        return {\n            ...params,\n            external_urls: Map<string>(params.external_urls ?? ({} as any)),\n            followers:\n                params.followers instanceof ReferenceRecord\n                    ? params.followers\n                    : new ReferenceRecord(params.followers),\n            images: List(params.images ?? []).map((i) =>\n                i instanceof ImageRecord ? i : new ImageRecord(i)\n            ),\n        };\n    }\n\n    constructor(params?: Partial<SpotifyUser | UserRecord>) {\n        if (!params) {\n            super();\n            return;\n        }\n\n        super({\n            ...params,\n            ...UserRecord._transform(params),\n        });\n    }\n\n    public with(params?: Partial<SpotifyUser | UserRecord>): UserRecord {\n        return params\n            ? this.merge({\n                  ...params,\n                  ...UserRecord._transform(params),\n              })\n            : this;\n    }\n}\n","import { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\nimport { List, Record, Map } from \"immutable\";\nimport { ImageRecord } from \"../core/image-record\";\nimport { UserRecord } from \"../core/user-record\";\nimport { SpotifyPaging } from \"../../dtos/Spotify/core\";\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\n\nconst recordDefaults = {\n    collaborative: false,\n    description: \"\",\n    external_urls: Map<string>({}),\n    href: (null as unknown) as string,\n    id: (null as unknown) as string,\n    images: List<ImageRecord>([]),\n    name: \"\",\n    owner: new UserRecord(),\n    public: false,\n    snapshot_id: \"\",\n    tracks: {} as SpotifyPaging<SpotifyTrackWithMetadata>,\n    type: \"playlist\",\n    uri: \"\",\n};\n\nexport class PlaylistRecord extends Record(recordDefaults, \"Playlist\") {\n    private static _transform(\n        params: Partial<SpotifyPlaylist | PlaylistRecord>\n    ) {\n        return {\n            ...params,\n            external_urls: Map<string>(params.external_urls ?? ({} as any)),\n            owner:\n                params.owner instanceof UserRecord\n                    ? params.owner\n                    : new UserRecord(params.owner),\n            images: List(\n                !params.images ? [new ImageRecord()] : params.images\n            ).map((i) => (i instanceof ImageRecord ? i : new ImageRecord(i))),\n        };\n    }\n\n    constructor(params?: Partial<SpotifyPlaylist | PlaylistRecord>) {\n        if (!params) {\n            super();\n            return;\n        }\n\n        super({\n            ...params,\n            ...PlaylistRecord._transform(params),\n        });\n    }\n\n    public with(\n        params: Partial<SpotifyPlaylist | PlaylistRecord>\n    ): PlaylistRecord {\n        return params\n            ? this.merge({\n                  ...params,\n                  ...PlaylistRecord._transform(params),\n              })\n            : this;\n    }\n}\n","import { List, Record } from \"immutable\";\nimport { SpotifyPaging } from \"../../dtos/Spotify/core\";\nimport { PlaylistRecord } from \"./playlist-record\";\nimport { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\n\nconst defaultValues = {\n    href: \"\",\n    items: List<PlaylistRecord>(),\n    limit: 0,\n    next: \"\",\n    offset: 0,\n    previous: \"\",\n    total: 0,\n};\n\nexport class PlaylistPagingRecord extends Record(defaultValues, \"Paging\") {\n    private static _transform(\n        params: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\n    ) {\n        let items: List<PlaylistRecord>;\n        if (!!params.items) {\n            items = List(\n                (params as SpotifyPaging<SpotifyPlaylist>).items\n            ).map((i: SpotifyPlaylist | PlaylistRecord) =>\n                i instanceof PlaylistRecord ? i : new PlaylistRecord(i)\n            );\n        } else {\n            items = List([]);\n        }\n\n        return {\n            ...params,\n            items,\n        };\n    }\n\n    constructor(\n        params?: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\n    ) {\n        if (!params) {\n            super();\n            return;\n        }\n\n        super({\n            ...params,\n            ...PlaylistPagingRecord._transform(params),\n        });\n    }\n\n    with(\n        params?: Partial<SpotifyPaging<SpotifyPlaylist> | PlaylistPagingRecord>\n    ): PlaylistPagingRecord {\n        return params\n            ? this.merge({\n                  ...params,\n                  ...PlaylistPagingRecord._transform(params),\n              })\n            : this;\n    }\n}\n","import { SpotifyPaging, SpotifyUser } from \"../../dtos/Spotify/core\";\nimport { SpotifyPlaylist } from \"../../dtos/Spotify/playlist\";\nimport { PlaylistPagingRecord } from \"../../view-models/playlist/playlist-paging-record\";\nimport { UserRecord } from \"../../view-models/core/user-record\";\nimport buildUrl from \"build-url\";\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\n\nexport interface ISpotifyApiService {\n    setAccessToken: (token_type: string, access_token: string) => void;\n    getCurrentUserPlaylists: (\n        fetchUrl?: string\n    ) => Promise<PlaylistPagingRecord>;\n    getCurrentUserProfile: () => Promise<UserRecord>;\n    getPlaylist: (id: string) => Promise<PlaylistRecord>;\n    getTracklist: (\n        url: string\n    ) => Promise<SpotifyPaging<SpotifyTrackWithMetadata>>;\n}\n\nconst baseUrl = \"https://api.spotify.com/v1\";\nconst spotifyAccountsUrl = \"https://accounts.spotify.com\";\nconst client_id = \"3c5666e14ae14e39a0efc18f540d621e\";\nconst response_type = \"token\";\nconst scope =\n    \"user-read-private user-read-email playlist-read-private playlist-read-collaborative playlist-modify-public playlist-modify-private\";\n\nexport const SpotifyApiService: ISpotifyApiService = (function() {\n    const _authenticate = () => {\n        const { origin } = window.location;\n\n        const href = buildUrl(spotifyAccountsUrl, {\n            path: \"authorize\",\n            queryParams: {\n                response_type,\n                client_id,\n                scope,\n                redirect_uri: `${origin}`,\n                state: JSON.stringify({ redirect_uri: window.location.href }),\n            },\n        });\n\n        window.location.href = href;\n    };\n\n    const _spotifyFetch = async <T = any>(fetchUrl: string): Promise<T> => {\n        const spotify_auth = localStorage.getItem(\"spotify_auth\");\n\n        if (!spotify_auth) {\n            _authenticate();\n        }\n\n        const { token_type, access_token } = JSON.parse(spotify_auth as string);\n\n        if (!access_token || !token_type) {\n            _authenticate();\n        }\n\n        const response = await fetch(fetchUrl, {\n            headers: {\n                Authorization: `${token_type} ${access_token}`,\n            },\n        });\n\n        // Check if unauthenticated user\n        if (response.status === 401) {\n            _authenticate();\n        }\n\n        const json = await response.json();\n\n        return json;\n    };\n\n    const _setAccessToken = (token_type: string, access_token: string) => {\n        localStorage.setItem(\n            \"spotify_auth\",\n            JSON.stringify({\n                token_type,\n                access_token,\n            })\n        );\n    };\n\n    const _getCurrentUserPlaylists = async (\n        fetchUrl?: string\n    ): Promise<PlaylistPagingRecord> => {\n        return await _spotifyFetch<SpotifyPaging<SpotifyPlaylist>>(\n            fetchUrl ?? `${baseUrl}/me/playlists`\n        ).then((playlistJson) => new PlaylistPagingRecord(playlistJson));\n    };\n\n    const _getCurrentUserProfile = async (): Promise<UserRecord> => {\n        return await _spotifyFetch<SpotifyUser>(`${baseUrl}/me`).then(\n            (user) => new UserRecord(user)\n        );\n    };\n\n    const _getPlaylist = async (id: string): Promise<PlaylistRecord> => {\n        return await _spotifyFetch<SpotifyPlaylist>(\n            `${baseUrl}/playlists/${id}`\n        ).then((playlistJson) => new PlaylistRecord(playlistJson));\n    };\n\n    const _getTracklist = async (\n        url: string\n    ): Promise<SpotifyPaging<SpotifyTrackWithMetadata>> => {\n        return await _spotifyFetch<SpotifyPaging<SpotifyTrackWithMetadata>>(\n            url\n        );\n    };\n\n    return {\n        setAccessToken: _setAccessToken,\n        getCurrentUserPlaylists: _getCurrentUserPlaylists,\n        getCurrentUserProfile: _getCurrentUserProfile,\n        getPlaylist: _getPlaylist,\n        getTracklist: _getTracklist,\n    };\n})();\n","import {\n    SpotifyApiService,\n    ISpotifyApiService,\n} from \"../services/spotify/spotify-service\";\nimport { createContext } from \"react\";\n\ninterface SpotifyContext {\n    spotifyApi: ISpotifyApiService;\n}\n\nexport const Spotify = createContext<SpotifyContext>({\n    spotifyApi: SpotifyApiService,\n});\n","import { useContext } from \"react\";\nimport { Spotify } from \"../context/spotify\";\n\n// Hook\nexport function useSpotifyApi() {\n    const { spotifyApi } = useContext(Spotify);\n\n    return spotifyApi;\n}\n","import { useRouter } from \"../../hooks/router-hooks\";\nimport React from \"react\";\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\n\nexport interface SpotifyTokenParams {\n    token_type?: string;\n    access_token?: string;\n    state?: string;\n}\n\nexport const SpotifyCallback = () => {\n    const { location } = useRouter();\n    const spotifyApi = useSpotifyApi();\n\n    const params = location.hash\n        .substr(1)\n        .split(\"&\")\n        .map((v) => v.split(\"=\"))\n        .reduce(\n            (pre, [key, value]) => ({ ...pre, [key]: value }),\n            {}\n        ) as SpotifyTokenParams;\n\n    if (!!params.token_type && !!params.access_token) {\n        spotifyApi.setAccessToken(params.token_type, params.access_token);\n\n        if (!!params.state) {\n            var state = decodeURIComponent(params.state);\n            var { redirect_uri } = JSON.parse(state);\n\n            if (!!redirect_uri) {\n                window.location.href = redirect_uri;\n            }\n        }\n    }\n\n    return <p>There was an error connecting to Spotify...</p>;\n};\n","import React, { useMemo, useState } from \"react\";\n\nexport enum SwitchCheckboxAlignment {\n    Left,\n    Right,\n}\n\ninterface SwitchCheckboxProps {\n    alignment?: SwitchCheckboxAlignment;\n    className?: string;\n    isChecked: boolean;\n    showDisplayValue?: boolean;\n    checkedDisplayValue?: string;\n    unCheckedDisplayValue?: string;\n    onChange?: (nextValue: boolean) => void;\n}\n\nexport const SwitchCheckbox = ({\n    alignment = SwitchCheckboxAlignment.Left,\n    className,\n    isChecked,\n    showDisplayValue = true,\n    checkedDisplayValue,\n    unCheckedDisplayValue,\n    onChange,\n}: SwitchCheckboxProps) => {\n    const [checked, setChecked] = useState(isChecked);\n\n    const switchText = (placement: SwitchCheckboxAlignment) => {\n        if (!showDisplayValue || placement !== alignment) return;\n\n        const paddingClassName =\n            alignment === SwitchCheckboxAlignment.Left ? \"pr-2\" : \"pl-2\";\n\n        return (\n            <span className={`flex-shrink ${paddingClassName}`}>\n                {checked ? checkedDisplayValue : unCheckedDisplayValue}\n            </span>\n        );\n    };\n\n    const switchClassNames = useMemo(() => {\n        const additionalClassNames = isChecked\n            ? \"bg-green-300 justify-end\"\n            : \"bg-gray-300 justify-start\";\n\n        return `border rounded-full border-gray-900 flex items-center w-12 ${additionalClassNames}`;\n    }, [isChecked]);\n\n    const onClick = () =>\n        setChecked((prevCheckedValue) => {\n            const nextCheckedValue = !prevCheckedValue;\n\n            if (!!onChange) {\n                onChange(nextCheckedValue);\n            }\n\n            return nextCheckedValue;\n        });\n\n    return (\n        <span\n            className={`inline-flex cursor-pointer ${className}`}\n            onClick={onClick}>\n            {switchText(SwitchCheckboxAlignment.Left)}\n\n            <span className={switchClassNames}>\n                <span className=\"rounded-full border w-6 h-6 border-gray-900 shadow-inner bg-white shadow\"></span>\n            </span>\n\n            {switchText(SwitchCheckboxAlignment.Right)}\n        </span>\n    );\n};\n","import React, { forwardRef } from \"react\";\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\nimport { ImageRecord } from \"../../view-models/core/image-record\";\nimport { List } from \"immutable\";\n\nexport interface TrackListingProps {\n    track: SpotifyTrackWithMetadata;\n}\n\nexport const TrackListing = forwardRef<HTMLDivElement, TrackListingProps>(\n    ({ track }, ref) => {\n        const artists = (!track.track.artists ? [] : track.track.artists)\n            .filter((a) => !!a && !!a.name)\n            .map((a) => a.name)\n            .join(\", \");\n\n        const trackImageUrl = List(\n            track.track.album.images.map((i) => new ImageRecord(i))\n        )\n            .skip(1)\n            .first(new ImageRecord()).url;\n\n        return (\n            <div ref={ref} className=\"border-gray-400 border-t p-4\">\n                <div className=\"flex\">\n                    <div className=\"h-32 w-32 flex-none\">\n                        <img\n                            className=\"h-full w-full object-cover\"\n                            src={trackImageUrl}\n                            alt={`${track.track.name} cover`}\n                        />\n                    </div>\n                    <div className=\"m-2 flex-grow\">\n                        <h3 className=\"text-sm font-medium\">\n                            {track.track.name}\n                        </h3>\n                        <h4 className=\"text-xs text-gray-700 font-medium\">\n                            {artists}\n                        </h4>\n                        <h5 className=\"text-xs font-medium\">\n                            {track.track.album.name}\n                        </h5>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n);\n","import React from \"react\";\n\ninterface LoaderProps {\n    message: string;\n}\n\nexport const Loader = ({ message }: LoaderProps) => (\n    <div className=\"font-semibold border-gray-400 border-t p-4\">\n        <svg\n            className=\"fill-current text-gray-900 inline-block h-4 w-4 align-baseline\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 55 80\">\n            <g transform=\"matrix(1 0 0 -1 0 80)\">\n                <rect width=\"10\" height=\"20\" rx=\"3\">\n                    <animate\n                        attributeName=\"height\"\n                        begin=\"0s\"\n                        dur=\"4.3s\"\n                        values=\"20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20\"\n                        calcMode=\"linear\"\n                        repeatCount=\"indefinite\"\n                    />\n                </rect>\n                <rect x=\"15\" width=\"10\" height=\"80\" rx=\"3\">\n                    <animate\n                        attributeName=\"height\"\n                        begin=\"0s\"\n                        dur=\"2s\"\n                        values=\"80;55;33;5;75;23;73;33;12;14;60;80\"\n                        calcMode=\"linear\"\n                        repeatCount=\"indefinite\"\n                    />\n                </rect>\n                <rect x=\"30\" width=\"10\" height=\"50\" rx=\"3\">\n                    <animate\n                        attributeName=\"height\"\n                        begin=\"0s\"\n                        dur=\"1.4s\"\n                        values=\"50;34;78;23;56;23;34;76;80;54;21;50\"\n                        calcMode=\"linear\"\n                        repeatCount=\"indefinite\"\n                    />\n                </rect>\n                <rect x=\"45\" width=\"10\" height=\"30\" rx=\"3\">\n                    <animate\n                        attributeName=\"height\"\n                        begin=\"0s\"\n                        dur=\"2s\"\n                        values=\"30;45;13;80;56;72;45;76;34;23;67;30\"\n                        calcMode=\"linear\"\n                        repeatCount=\"indefinite\"\n                    />\n                </rect>\n            </g>\n        </svg>\n        <span className=\"align-baseline pl-1\">{message}</span>\n    </div>\n);\n","import React, {\n    FC,\n    useEffect,\n    useState,\n    useRef,\n    ForwardRefExoticComponent,\n    PropsWithoutRef,\n    PropsWithRef,\n} from \"react\";\nimport { List } from \"immutable\";\n\nexport type RowTemplateFactory = [\n    PropsWithoutRef<any> & Partial<{ key: any }>,\n    ForwardRefExoticComponent<PropsWithRef<any> & Partial<{ key: any }>>\n];\n\ninterface InfiniteScrollerProps {\n    hasMore: boolean;\n    itemRowTemplate: (val: any) => RowTemplateFactory;\n    items: List<any>;\n    onLoadMoreItems: () => void;\n    triggerOffsetCount?: number;\n}\n\nexport const InfiniteScroller: FC<InfiniteScrollerProps> = ({\n    hasMore,\n    itemRowTemplate,\n    items,\n    onLoadMoreItems,\n    triggerOffsetCount = 0,\n}) => {\n    const [pageHeight, setPageHeight] = useState(\n        document.documentElement.clientHeight\n    );\n    const loadMoreTriggerTrackRef = useRef<HTMLElement>();\n\n    // Watch infinite scroller div scroll/resize\n    useEffect(() => {\n        const onResize = () => {\n            const calculatedScrollerHeight =\n                document.documentElement.clientHeight;\n\n            if (\n                !!calculatedScrollerHeight &&\n                calculatedScrollerHeight !== pageHeight\n            ) {\n                setPageHeight(calculatedScrollerHeight);\n            }\n        };\n\n        const onScroll = () => {\n            if (!loadMoreTriggerTrackRef?.current || !hasMore) return;\n\n            const rect = loadMoreTriggerTrackRef.current!.getBoundingClientRect();\n            const shouldLoadMore = rect.top >= 0 && rect.bottom <= pageHeight;\n\n            if (shouldLoadMore) {\n                onLoadMoreItems();\n            }\n        };\n\n        window.addEventListener(\"scroll\", onScroll, true);\n        window.addEventListener(\"resize\", onResize);\n\n        onScroll();\n\n        return () => {\n            window.removeEventListener(\"resize\", onResize);\n            window.removeEventListener(\"scroll\", onScroll);\n        };\n    }, [hasMore, pageHeight, onLoadMoreItems]);\n\n    if (!items) return null;\n\n    const listLength = items.count();\n    const triggerElementIndex =\n        listLength <= triggerOffsetCount ? 0 : listLength - triggerOffsetCount;\n\n    return (\n        <>\n            {items.map((t, i) => {\n                let [itemProps, ItemTemplate] = itemRowTemplate(t);\n\n                if (i === triggerElementIndex) {\n                    itemProps = {\n                        ...itemProps,\n                        ref: loadMoreTriggerTrackRef,\n                    };\n                }\n\n                return <ItemTemplate {...itemProps} />;\n            })}\n        </>\n    );\n};\n","import { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\nimport React, { useState, Fragment } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\nimport { useAsyncEffect } from \"use-async-effect\";\nimport { ImageRecord } from \"../../view-models/core/image-record\";\nimport { SpotifyTrackWithMetadata } from \"../../dtos/Spotify/track\";\nimport { TrackListing } from \"../../components/track-listing/track-listing\";\nimport { List } from \"immutable\";\nimport { Loader } from \"../../components/loader/loader\";\nimport {\n    InfiniteScroller,\n    RowTemplateFactory,\n} from \"../../components/infinite-scroller/infinite-scroller\";\n\nexport const Playlist = () => {\n    const { id } = useParams();\n    const [playlist, setPlaylist] = useState<PlaylistRecord>();\n    const [tracklist, setTracklist] = useState<List<SpotifyTrackWithMetadata>>(\n        List([])\n    );\n    const [hasMore, setHasMore] = useState(true);\n    const [loadNext, setLoadNext] = useState(false);\n    const [nextTracksUri, setNextTracksUri] = useState<string>();\n    const spotifyApi = useSpotifyApi();\n\n    const TrackListingTemplate = (\n        track: SpotifyTrackWithMetadata\n    ): RowTemplateFactory => [\n        { track: track, key: track.track.id },\n        TrackListing,\n    ];\n\n    // Load Initial Data\n    useAsyncEffect(async (isMounted) => {\n        const playlist = await spotifyApi.getPlaylist(id!);\n\n        if (!isMounted()) return;\n\n        setLoadNext(false);\n        setNextTracksUri(playlist.tracks.next);\n        setPlaylist(playlist);\n        setTracklist(tracklist.push(...playlist.tracks.items));\n        setHasMore(!!playlist.tracks.next);\n    }, []);\n\n    // Load more data\n    useAsyncEffect(\n        async (isMounted) => {\n            if (!loadNext || !nextTracksUri) return;\n\n            const nextTracklistPage = await spotifyApi.getTracklist(\n                nextTracksUri\n            );\n\n            if (!isMounted()) return;\n\n            setLoadNext(false);\n            setNextTracksUri(nextTracklistPage.next);\n            setTracklist((prevTracklist) =>\n                prevTracklist.push(...nextTracklistPage.items)\n            );\n            setHasMore(!!nextTracklistPage.next);\n        },\n        [loadNext, nextTracksUri]\n    );\n\n    if (!playlist) {\n        return null;\n    }\n\n    const LoadingTracks = () => {\n        if (!loadNext || !playlist || !nextTracksUri) return null;\n\n        return <Loader message=\"Loading tracks...\" />;\n    };\n\n    return (\n        <Fragment>\n            <div>\n                <h2 className=\"antialiased text-sm font-bold uppercase tracking-widest\">\n                    {playlist.name}\n                </h2>\n                <div className=\"flex\">\n                    <div className=\"h-64 w-64 flex-none\">\n                        <img\n                            className=\"h-full w-full object-cover\"\n                            src={playlist.images.first(new ImageRecord()).url}\n                            alt={`${playlist.name} cover`}\n                        />\n                    </div>\n                    <div className=\"m-2 flex-grow\">\n                        <h3 className=\"text-sm text-gray-800\">\n                            {playlist.tracks.total} songs\n                        </h3>\n                        <span className=\"block text-xs text-gray-700\">\n                            by {playlist.owner.display_name}\n                        </span>\n                    </div>\n                </div>\n                <div className=\"font-semibold mt-4\">Tracks</div>\n\n                <InfiniteScroller\n                    hasMore={hasMore}\n                    itemRowTemplate={TrackListingTemplate}\n                    items={tracklist}\n                    onLoadMoreItems={() => setLoadNext(true)}\n                    triggerOffsetCount={10}\n                />\n\n                <LoadingTracks />\n            </div>\n        </Fragment>\n    );\n};\n","import { useEffect } from \"react\";\nimport React from \"react\";\n\nexport const NavBarBackground = ({\n    isMenuOpen,\n    onBackgroundClick,\n}: {\n    isMenuOpen: boolean;\n    onBackgroundClick: () => void;\n}) => {\n    useEffect(() => {\n        const handleMenuClick = () => onBackgroundClick();\n\n        if (isMenuOpen) {\n            document.addEventListener(\"click\", handleMenuClick);\n        }\n\n        return () => document.removeEventListener(\"click\", handleMenuClick);\n    }, [isMenuOpen, onBackgroundClick]);\n\n    if (!isMenuOpen) return null;\n\n    return (\n        <button\n            onClick={onBackgroundClick}\n            tabIndex={-1}\n            className=\"fixed inset-0 h-full w-full bg-black opacity-50 cursor-default\"></button>\n    );\n};\n","import React, { useState, Fragment } from \"react\";\nimport { Link, useRouteMatch, useHistory } from \"react-router-dom\";\nimport { NavBarBackground } from \"./nav-bar-background\";\n\nconst SvgMenuIcon = ({ isMenuOpen }: { isMenuOpen: boolean }) => {\n    const path = isMenuOpen ? (\n        <path\n            fillRule=\"evenodd\"\n            d=\"M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z\"\n        />\n    ) : (\n        <path\n            fillRule=\"evenodd\"\n            d=\"M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z\"\n        />\n    );\n\n    return (\n        <svg className=\"h-6 w-6 fill-current\" viewBox=\"0 0 24 24\">\n            {path}\n        </svg>\n    );\n};\n\ninterface SubMenuNavLinkProps {\n    className?: string;\n    isActive?: boolean;\n    label: string;\n    to: string;\n}\n\nconst SubMenuNavLink = ({\n    className,\n    isActive,\n    label,\n    to,\n}: SubMenuNavLinkProps) => {\n    let classes = `${className} flex-shrink`;\n\n    if (!isActive) {\n        classes += \" text-gray-600 hover:text-gray-900\";\n    }\n\n    return (\n        <Link className={classes} to={to}>\n            {label}\n        </Link>\n    );\n};\n\nconst GoBackLink = () => {\n    let history = useHistory();\n\n    return (\n        <button\n            onClick={() => history.goBack()}>\n            <svg\n                className=\"h-4 w-4 inline-block\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\">\n                <line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\" />\n                <polyline points=\"12 19 5 12 12 5\" />\n            </svg>\n            <span className=\"align-middle ml-1 font-semibold\">Go Back</span>\n        </button>\n    );\n};\n\nconst SubMenuNavigation = () => {\n    let links: SubMenuNavLinkProps[] = [];\n    const baseMatch = useRouteMatch(\"/\");\n    const playlistsMatch = useRouteMatch(\"/playlists\");\n    const followingPlaylistsMatch = useRouteMatch(\"/playlists/following\");\n\n    if (playlistsMatch || (!!baseMatch && baseMatch.isExact)) {\n        links = [\n            {\n                to: \"/playlists/mine\",\n                label: \"My Playlists\",\n                isActive:\n                    !followingPlaylistsMatch ||\n                    !followingPlaylistsMatch.isExact,\n            },\n            {\n                to: \"/playlists/following\",\n                label: \"Following\",\n                isActive:\n                    !!followingPlaylistsMatch &&\n                    followingPlaylistsMatch.isExact,\n            },\n        ];\n    }\n\n    const displayLinks = (links: SubMenuNavLinkProps[]) => {\n        if (!links || !links.length) {\n            return <GoBackLink />;\n        }\n\n        return links.map((linkProps, i) => {\n            if (i > 0) {\n                linkProps = {\n                    ...linkProps,\n                    className: \"pl-4\",\n                };\n            }\n\n            return <SubMenuNavLink {...linkProps} key={linkProps.to} />;\n        });\n    };\n\n    return (\n        <div className=\"bg-gray-400 border-gray-600 border-b shadow px-4 py-2 font-semibold text-gray-900 align-middle flex flex-row\">\n            {displayLinks(links)}\n        </div>\n    );\n};\n\nexport const NavBar = () => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    let menuClass = \"px-2 pt-2 pb-4 \";\n    menuClass += isMenuOpen ? \"block\" : \"hidden\";\n\n    const onMenuClick = () => setIsMenuOpen((prevState) => !prevState);\n\n    return (\n        <Fragment>\n            <NavBarBackground\n                isMenuOpen={isMenuOpen}\n                onBackgroundClick={() => setIsMenuOpen(false)}\n            />\n            <nav className=\"fixed w-screen\">\n                <div className=\"bg-gray-900 text-white font-bold z-10 py-2\">\n                    <div className=\"flex items-center justify-between px-4 py-3\">\n                        <div>\n                            <h1 className=\"uppercase\">Crowd Source Radio</h1>\n                        </div>\n                        <div>\n                            <button\n                                onClick={onMenuClick}\n                                type=\"button\"\n                                className=\"block text-gray-500 hover:text-white focus:text-white focus:outline-none\">\n                                <SvgMenuIcon isMenuOpen={isMenuOpen} />\n                            </button>\n                        </div>\n                    </div>\n                    <div className={menuClass}>\n                        <Link\n                            to=\"/\"\n                            className=\"block px-2 py-1 text-white font-semibold rounded hover:bg-gray-800\">\n                            Playlists\n                        </Link>\n                        <Link\n                            to=\"/browse\"\n                            className=\"block px-2 py-1 text-white font-semibold rounded hover:bg-gray-800\">\n                            Browse\n                        </Link>\n                    </div>\n                </div>\n                <SubMenuNavigation />\n            </nav>\n        </Fragment>\n    );\n};\n","import React, { Fragment } from \"react\";\nimport { NavBar } from \"../components/nav-bar/nav-bar\";\n\ninterface DefaultLayoutProps {}\n\nconst DefaultLayout = ({\n    children,\n}: React.PropsWithChildren<DefaultLayoutProps>) => {\n    return (\n        <Fragment>\n            <header className=\"h-26 select-none\">\n                <NavBar />\n            </header>\n            <section className=\"px-4 pt-4 h-screen-minus-26 overflow-y-auto\">\n                {children}\n            </section>\n        </Fragment>\n    );\n};\n\nexport default DefaultLayout;\n","import React, { forwardRef } from \"react\";\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\nimport { ImageRecord } from \"../../view-models/core/image-record\";\nimport { useRouter } from \"../../hooks/router-hooks\";\n\nexport interface PlaylistCardProps {\n    playlist: PlaylistRecord;\n}\n\nexport const PlaylistCard = forwardRef<HTMLButtonElement, PlaylistCardProps>(\n    ({ playlist }, ref) => {\n        const image = playlist.images.first() as ImageRecord;\n        const router = useRouter();\n\n        const gotoPlaylist = () =>\n            router.history.push(`/playlist/${playlist.id}`);\n\n        return (\n            <button\n                ref={ref}\n                onClick={gotoPlaylist}\n                className=\"block flex mb-4 w-full rounded-lg bg-gray-600 overflow-hidden flex text-white text-left focus:outline-none focus:border-gray-600 focus:shadow-outline\">\n                <div className=\"h-32 w-32 flex-none\">\n                    <img\n                        className=\"h-full w-full object-cover\"\n                        src={image.url}\n                        alt={`${playlist.name} cover`}\n                    />\n                </div>\n                <div className=\"m-2 flex-grow\">\n                    <h2 className=\"font-semibold overflow-hidden h-6\">\n                        {playlist.name}\n                    </h2>\n                    <h3 className=\"text-sm text-gray-100\">\n                        {playlist.tracks.total} songs\n                    </h3>\n                    <span className=\"block text-xs text-gray-300\">\n                        by {playlist.owner.display_name}\n                    </span>\n                </div>\n            </button>\n        );\n    }\n);\n","import React, { useState } from \"react\";\nimport { useAsyncEffect } from \"use-async-effect\";\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\nimport { PlaylistCard } from \"../playlist-card/playlist-card\";\nimport { List } from \"immutable\";\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\nimport {\n    InfiniteScroller,\n    RowTemplateFactory,\n} from \"../infinite-scroller/infinite-scroller\";\nimport { Loader } from \"../loader/loader\";\n\ninterface PlaylistListProps {\n    playlistFilter?: (playlist: PlaylistRecord) => boolean;\n}\n\nconst PlaylistList = ({ playlistFilter = (_) => true }: PlaylistListProps) => {\n    const [hasMore, setHasMore] = useState(true);\n    const [loadNext, setLoadNext] = useState(false);\n    const [playlists, setPlaylists] = useState<List<PlaylistRecord>>(List([]));\n    const [nextPlaylistPageUri, setNextPlaylistPageUri] = useState<string>();\n    const spotifyApi = useSpotifyApi();\n\n    const PlaylistCardTemplate = (\n        playlist: PlaylistRecord\n    ): RowTemplateFactory => [\n        { playlist: playlist, key: playlist.id },\n        PlaylistCard,\n    ];\n\n    // Load initial data\n    useAsyncEffect(\n        async (isMounted) => {\n            const playlistPage = await spotifyApi.getCurrentUserPlaylists();\n\n            if (!isMounted()) return;\n\n            const playlistRecords = playlistPage.items.filter(playlistFilter);\n\n            setPlaylists(List([]));\n            setPlaylists(playlistRecords);\n            setLoadNext(false);\n            setNextPlaylistPageUri(playlistPage.next);\n            setHasMore(!!playlistPage.next);\n        },\n        [playlistFilter]\n    );\n\n    // Load more data\n    useAsyncEffect(\n        async (isMounted) => {\n            if (!nextPlaylistPageUri || !loadNext) return;\n\n            const nextPlaylistPage = await spotifyApi.getCurrentUserPlaylists(\n                nextPlaylistPageUri\n            );\n\n            if (!isMounted()) return;\n\n            setPlaylists((prevPlaylist) =>\n                prevPlaylist.merge(\n                    nextPlaylistPage.items.filter(playlistFilter)\n                )\n            );\n            setLoadNext(false);\n            setNextPlaylistPageUri(nextPlaylistPage.next);\n            setHasMore(!!nextPlaylistPage.next);\n        },\n        [loadNext, nextPlaylistPageUri]\n    );\n\n    const LoadingPlaylists = () => {\n        if (!loadNext || !nextPlaylistPageUri) return null;\n\n        return <Loader message=\"Loading playlists...\" />;\n    };\n\n    return (\n        <React.Fragment>\n            <InfiniteScroller\n                hasMore={hasMore}\n                itemRowTemplate={PlaylistCardTemplate}\n                items={playlists}\n                onLoadMoreItems={() => setLoadNext(true)}\n                triggerOffsetCount={3}\n            />\n\n            <LoadingPlaylists />\n        </React.Fragment>\n    );\n};\n\nexport default PlaylistList;\n","import React, { useState } from \"react\";\nimport { useAsyncEffect } from \"use-async-effect\";\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\nimport { UserRecord } from \"../../view-models/core/user-record\";\nimport {\n    SwitchCheckbox,\n    SwitchCheckboxAlignment,\n} from \"../../components/switch-checkbox/switch-checkbox\";\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\nimport { useHistory } from \"react-router-dom\";\n\nconst MyPlaylists = () => {\n    const [user, setUser] = useState<UserRecord>(() => new UserRecord());\n    const spotifyApi = useSpotifyApi();\n    let history = useHistory();\n\n    const filterByOwner = (user: UserRecord) => (playlist: PlaylistRecord) => {\n        const shouldDisplay =\n            !!user &&\n            playlist.owner.id === user.id &&\n            (playlist.public || playlist.collaborative);\n\n        return shouldDisplay;\n    };\n\n    // Load initial data\n    useAsyncEffect(async (isMounted) => {\n        const user = await spotifyApi.getCurrentUserProfile();\n\n        if (!isMounted()) return;\n\n        setUser(user);\n    }, []);\n\n    const onPlaylistVisibilityChanged = (_: boolean) =>\n        history.push(\"/playlists/all\");\n\n    return (\n        <React.Fragment>\n            <SwitchCheckbox\n                alignment={SwitchCheckboxAlignment.Right}\n                className=\"align-middle mb-4 font-semibold\"\n                isChecked={false}\n                checkedDisplayValue=\"All Playlists\"\n                unCheckedDisplayValue=\"Public Playlists\"\n                onChange={onPlaylistVisibilityChanged}\n            />\n\n            <PlaylistList playlistFilter={filterByOwner(user)} />\n        </React.Fragment>\n    );\n};\n\nexport default MyPlaylists;\n","import React, { useState } from \"react\";\nimport { useAsyncEffect } from \"use-async-effect\";\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\nimport { UserRecord } from \"../../view-models/core/user-record\";\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\n\nconst FollowingPlaylists = () => {\n    const spotifyApi = useSpotifyApi();\n    const [user, setUser] = useState<UserRecord>(() => new UserRecord());\n\n    const filterNotByOwner = (user: UserRecord) => (\n        playlist: PlaylistRecord\n    ) => {\n        const shouldDisplay = !!user && playlist.owner.id !== user.id;\n\n        return shouldDisplay;\n    };\n\n    // Load initial data\n    useAsyncEffect(async (isMounted) => {\n        const user = await spotifyApi.getCurrentUserProfile();\n\n        if (!isMounted()) return;\n\n        setUser(user);\n    }, []);\n\n    return <PlaylistList playlistFilter={filterNotByOwner(user)} />;\n};\n\nexport default FollowingPlaylists;\n","import React, { useState } from \"react\";\nimport { useAsyncEffect } from \"use-async-effect\";\nimport { PlaylistRecord } from \"../../view-models/playlist/playlist-record\";\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\nimport { UserRecord } from \"../../view-models/core/user-record\";\nimport {\n    SwitchCheckbox,\n    SwitchCheckboxAlignment,\n} from \"../../components/switch-checkbox/switch-checkbox\";\nimport PlaylistList from \"../../components/playlist-list/playlist-list\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AllMyPlaylists = () => {\n    const spotifyApi = useSpotifyApi();\n    const history = useHistory();\n    const [user, setUser] = useState(() => new UserRecord());\n    const filterByOwner = (user: UserRecord) => (playlist: PlaylistRecord) => {\n        const shouldDisplay = playlist.owner.id === user?.id;\n\n        return shouldDisplay;\n    };\n\n    // Load initial data\n    useAsyncEffect(async (isMounted) => {\n        const user = await spotifyApi.getCurrentUserProfile();\n\n        if (!isMounted()) return;\n\n        setUser(user);\n    }, []);\n\n    const onPlaylistVisibilityChanged = (_: boolean) =>\n        history.push(\"/playlists/mine\");\n\n    return (\n        <React.Fragment>\n            <SwitchCheckbox\n                alignment={SwitchCheckboxAlignment.Right}\n                className=\"align-middle mb-4 font-semibold\"\n                isChecked={true}\n                checkedDisplayValue=\"All Playlists\"\n                unCheckedDisplayValue=\"Public Playlists\"\n                onChange={onPlaylistVisibilityChanged}\n            />\n\n            <PlaylistList playlistFilter={filterByOwner(user)} />\n        </React.Fragment>\n    );\n};\n\nexport default AllMyPlaylists;\n","import React from \"react\";\nimport { useRouter } from \"../../hooks/router-hooks\";\nimport { useSpotifyApi } from \"../../hooks/service-hooks\";\nimport { SpotifyTokenParams } from \"../spotify-callback/spotify-callback\";\n\nexport const NotFound = () => {\n    const { location } = useRouter();\n    const spotifyApi = useSpotifyApi();\n\n    const params = location.pathname\n        .substr(1)\n        .split(\"&\")\n        .map((v) => v.split(\"=\"))\n        .reduce(\n            (pre, [key, value]) => ({ ...pre, [key]: value }),\n            {}\n        ) as SpotifyTokenParams;\n\n    if (!!params.token_type && !!params.access_token) {\n        spotifyApi.setAccessToken(params.token_type, params.access_token);\n\n        if (!!params.state) {\n            var state = decodeURIComponent(params.state);\n            var { redirect_uri } = JSON.parse(state);\n\n            if (!!redirect_uri) {\n                window.location.href = redirect_uri;\n            }\n        }\n    }\n\n    return (\n        <p className=\"text-gray-900 font-semibold text-lg\">\n            Uh oh. Page not found. :(\n        </p>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { SpotifyCallback } from \"./pages/spotify-callback/spotify-callback\";\nimport { Playlist } from \"./pages/playlist/playlist-page\";\nimport DefaultLayout from \"./layout/default-layout\";\nimport MyPlaylists from \"./pages/playlists/playlists-page\";\nimport FollowingPlaylists from \"./pages/playlists/playlists-following-page\";\nimport AllMyPlaylists from \"./pages/playlists/playlists-all-page\";\nimport { NotFound } from \"./pages/not-found/not-found-page\";\n\nconst App = () => {\n    useEffect(() => {\n        const BODY_CLASSES = [\"bg-gray-100\", \"overflow-y-hidden\"];\n        document.body.classList.add(...BODY_CLASSES);\n        return () => {\n            document.body.classList.remove(...BODY_CLASSES);\n        };\n    }, []);\n\n    return (\n        <Router>\n            <DefaultLayout>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <MyPlaylists />\n                    </Route>\n                    <Route exact path=\"/playlists/mine\">\n                        <MyPlaylists />\n                    </Route>\n                    <Route exact path=\"/playlists/all\">\n                        <AllMyPlaylists />\n                    </Route>\n                    <Route exact path=\"/playlists/following\">\n                        <FollowingPlaylists />\n                    </Route>\n                    <Route path=\"/callback\">\n                        <SpotifyCallback />\n                    </Route>\n                    <Route path=\"/playlist/:id\">\n                        <Playlist />\n                    </Route>\n                    <Route>\n                        <NotFound />\n                    </Route>\n                </Switch>\n            </DefaultLayout>\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}